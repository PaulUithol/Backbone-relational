{"version":3,"file":null,"sources":["../src/utils/semaphore.js","../src/utils/blocking-queue.js","../src/event-queue.js","../src/utils/extend.js","../src/utils/events.js","../src/utils/object.js","../src/config.js","../src/collection.js","../src/utils/relation-type-store.js","../src/relation-type-store.js","../src/utils/store.js","../src/store.js","../src/relation.js","../src/relation.has-one.js","../src/relation.has-many.js","../src/model.js","../src/backbone-relational.js"],"sourcesContent":["/**\n * Semaphore mixin; can be used as both binary and counting.\n **/\nexport default {\n\t_permitsAvailable: null,\n\t_permitsUsed: 0,\n\n\tacquire: function() {\n\t\tif ( this._permitsAvailable && this._permitsUsed >= this._permitsAvailable ) {\n\t\t\tthrow new Error( 'Max permits acquired' );\n\t\t} else {\n\t\t\tthis._permitsUsed++;\n\t\t}\n\t},\n\n\trelease: function() {\n\t\tif ( this._permitsUsed === 0 ) {\n\t\t\tthrow new Error( 'All permits released' );\n\t\t} else {\n\t\t\tthis._permitsUsed--;\n\t\t}\n\t},\n\n\tisLocked: function() {\n\t\treturn this._permitsUsed > 0;\n\t},\n\n\tsetAvailablePermits: function( amount ) {\n\t\tif ( this._permitsUsed > amount ) {\n\t\t\tthrow new Error( 'Available permits cannot be less than used permits' );\n\t\t}\n\t\tthis._permitsAvailable = amount;\n\t}\n};\n","import _ from 'underscore';\nimport Semaphore from './semaphore';\n\n/**\n * A BlockingQueue that accumulates items while blocked (via 'block'),\n * and processes them when unblocked (via 'unblock').\n * Process can also be called manually (via 'process').\n */\nconst BlockingQueue = function() {\n\tthis._queue = [];\n};\n\n_.extend( BlockingQueue.prototype, Semaphore, {\n\t_queue: null,\n\n\tadd: function( func ) {\n\t\tif ( this.isBlocked() ) {\n\t\t\tthis._queue.push( func );\n\t\t} else {\n\t\t\tfunc();\n\t\t}\n\t},\n\n\t// Some of the queued events may trigger other blocking events. By\n\t// copying the queue here it allows queued events to process closer to\n\t// the natural order.\n\t//\n\t// queue events [ 'A', 'B', 'C' ]\n\t// A handler of 'B' triggers 'D' and 'E'\n\t// By copying `this._queue` this executes:\n\t// [ 'A', 'B', 'D', 'E', 'C' ]\n\t// The same order the would have executed if they didn't have to be\n\t// delayed and queued.\n\tprocess: function() {\n\t\tvar queue = this._queue;\n\t\tthis._queue = [];\n\t\twhile ( queue && queue.length ) {\n\t\t\tqueue.shift()();\n\t\t}\n\t},\n\n\tblock: function() {\n\t\tthis.acquire();\n\t},\n\n\tunblock: function() {\n\t\tthis.release();\n\t\tif ( !this.isBlocked() ) {\n\t\t\tthis.process();\n\t\t}\n\t},\n\n\tisBlocked: function() {\n\t\treturn this.isLocked();\n\t}\n});\n\nexport default BlockingQueue;\n","import BlockingQueue from './utils/blocking-queue';\n\n/**\n * Global event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'change:<key>')\n * until the top-level object is fully initialized (see 'Backbone.Relational.Model').\n */\nexport default new BlockingQueue();\n","import {Model} from 'backbone';\n\nexport default Model.extend;\n","import Backbone from 'backbone';\n\nexport default Backbone.Events;\n","import _ from 'underscore';\nimport extend from './extend';\nimport Events from './events';\n\n/**\n * Base object to extend off of. Works similar to how you extend in Backbone\n */\nconst extendableObject = function(...args) {\n  this.initialize.call(this, ...args);\n};\n_.extend(extendableObject.prototype, Events);\nextendableObject.extend = extend;\n\nexport default extendableObject;\n","export default {\n  showWarnings: true\n};\n","import { Collection as BBCollection, Model as BBModel } from 'backbone';\nimport _ from 'underscore';\nimport eventQueue from './event-queue';\n\nexport default BBCollection.extend({\n\t/**\n\t * Override module.Collection._prepareModel, so objects will be built using the correct type\n\t * if the collection.model has subModels.\n\t * Attempts to find a model for `attrs` in Backbone.store through `findOrCreate`\n\t * (which sets the new properties on it if found), or instantiates a new model.\n\t */\n\t_prepareModel: function( attrs, options ) {\n\t\tvar model;\n\n\t\tif ( attrs instanceof BBModel ) {\n\t\t\tif ( !attrs.collection ) {\n\t\t\t\tattrs.collection = this;\n\t\t\t}\n\t\t\tmodel = attrs;\n\t\t}\n\t\telse {\n\t\t\toptions = options ? _.clone( options ) : {};\n\t\t\toptions.collection = this;\n\n\t\t\tif ( typeof this.model.findOrCreate !== 'undefined' ) {\n\t\t\t\tmodel = this.model.findOrCreate( attrs, options );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmodel = new this.model( attrs, options );\n\t\t\t}\n\n\t\t\tif ( model && model.validationError ) {\n\t\t\t\tthis.trigger( 'invalid', this, attrs, options );\n\t\t\t\tmodel = false;\n\t\t\t}\n\t\t}\n\n\t\treturn model;\n\t},\n\t/**\n\t * Override module.Collection.set, so we'll create objects from attributes where required,\n\t * and update the existing models. Also, trigger 'relational:add'.\n\t */\n\tset: function( models, options ) {\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\t// if ( !( this.model.prototype instanceof module.Model ) ) {\n\t\t// \treturn set.call( this, models, options );\n\t\t// }\n\n\t\tif ( options && options.parse ) {\n\t\t\tmodels = this.parse( models, options );\n\t\t}\n\n\t\tvar singular = !_.isArray( models ),\n\t\t\tnewModels = [],\n\t\t\ttoAdd = [],\n\t\t\tmodel = null;\n\n\t\tmodels = singular ? ( models ? [ models ] : [] ) : _.clone( models );\n\n\t\t//console.debug( 'calling add on coll=%o; model=%o, options=%o', this, models, options );\n\t\tfor ( var i = 0; i < models.length; i++ ) {\n\t\t\tmodel = models[i];\n\t\t\tif ( !( model instanceof BBModel ) ) {\n\t\t\t\tmodel = this._prepareModel( model, options );\n\t\t\t}\n\n\t\t\tif ( model ) {\n\t\t\t\ttoAdd.push( model );\n\n\t\t\t\tif ( !( this.get( model ) || this.get( model.cid ) ) ) {\n\t\t\t\t\tnewModels.push( model );\n\t\t\t\t}\n\t\t\t\t// If we arrive in `add` while performing a `set` (after a create, so the model gains an `id`),\n\t\t\t\t// we may get here before `_onModelEvent` has had the chance to update `_byId`.\n\t\t\t\telse if ( model.id != null ) {\n\t\t\t\t\tthis._byId[ model.id ] = model;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add 'models' in a single batch, so the original add will only be called once (and thus 'sort', etc).\n\t\t// If `parse` was specified, the collection and contained models have been parsed now.\n\t\ttoAdd = singular ? ( toAdd.length ? toAdd[ 0 ] : null ) : toAdd;\n\t\tvar result = BBCollection.prototype.set.call( this, toAdd, _.defaults( { merge: false, parse: false }, options ) );\n\n\t\tfor ( i = 0; i < newModels.length; i++ ) {\n\t\t\tmodel = newModels[i];\n\t\t\t// Fire a `relational:add` event for any model in `newModels` that has actually been added to the collection.\n\t\t\tif ( this.get( model ) || this.get( model.cid ) ) {\n\t\t\t\tthis.trigger( 'relational:add', model, this, options );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'module.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\n\t * are ready.\n\t */\n\ttrigger: function( eventName ) {\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\t// if ( !( this.model.prototype instanceof module.Model ) ) {\n\t\t// \treturn trigger.apply( this, arguments );\n\t\t// }\n\n\t\tif ( eventName === 'add' || eventName === 'remove' || eventName === 'reset' || eventName === 'sort' ) {\n\t\t\tvar dit = this,\n\t\t\t\targs = arguments;\n\n\t\t\tif ( _.isObject( args[ 3 ] ) ) {\n\t\t\t\targs = _.toArray( args );\n\t\t\t\t// the fourth argument is the option object.\n\t\t\t\t// we need to clone it, as it could be modified while we wait on the eventQueue to be unblocked\n\t\t\t\targs[ 3 ] = _.clone( args[ 3 ] );\n\t\t\t}\n\n\t\t\teventQueue.add( function() {\n\t\t\t\tBBCollection.prototype.trigger.apply( dit, args );\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tBBCollection.prototype.trigger.apply( this, arguments );\n\t\t}\n\n\t\treturn this;\n\t},\n\t/**\n\t * Override 'module.Collection.sort' to trigger 'relational:reset'.\n\t */\n\tsort: function( options ) {\n\t\tvar result = BBCollection.prototype.sort.call( this, options );\n\n\t\t// if ( this.model.prototype instanceof module.Model ) {\n\t\t\tthis.trigger( 'relational:reset', this, options );\n\t\t// }\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'module.Collection.reset' to trigger 'relational:reset'.\n\t */\n\treset: function( models, options ) {\n\t\toptions = _.extend( { merge: true }, options );\n\t\tvar result = BBCollection.prototype.reset.call( this, models, options );\n\n\t\t// if ( this.model.prototype instanceof module.Model ) {\n\t\t\tthis.trigger( 'relational:reset', this, options );\n\t\t// }\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'Backbone.Collection._removeModels' to trigger 'relational:remove'.\n\t */\n\t_removeModels: function( models, options ) {\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\t// if ( !( this.model.prototype instanceof module.Model ) ) {\n\t\t// \treturn _removeModels.call( this, models, options );\n\t\t// }\n\n\t\tvar toRemove = [];\n\n\t\t//console.debug('calling remove on coll=%o; models=%o, options=%o', this, models, options );\n\t\t_.each( models, _.bind(function( model ) {\n\t\t\tmodel = this.get( model ) || ( model && this.get( model.cid ) );\n\t\t\tmodel && toRemove.push( model );\n\t\t}, this ));\n\n\t\tvar result = BBCollection.prototype._removeModels.call( this, toRemove, options );\n\n\t\t_.each( toRemove, _.bind(function( model ) {\n\t\t\tthis.trigger( 'relational:remove', model, this, options );\n\t\t}, this ));\n\n\t\treturn result;\n\t}\n});\n","import BObject from './object';\n\nexport default BObject.extend({\n\tinitialize() {\n\t\tthis.types = {};\n\t},\n\tregisterType( name, Type ) {\n\t\tthis.types[ name ] = Type;\n\t},\n\tunregisterType( name, Type ) {\n\t\tif ( name in this.types ) {\n\t\t\tdelete this.types[ name ];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\tfind( name ) {\n\t\treturn this.types[ name ];\n\t}\n});\n","import RelationTypeStore from './utils/relation-type-store';\n\nexport default new RelationTypeStore();\n","import _ from 'underscore';\nimport { Model as BBModel } from 'backbone';\nimport BObject from './object';\nimport relationTypeStore from '../relation-type-store';\nimport config from '../config';\nimport Collection from '../collection';\n\n/**\n * Backbone.Store keeps track of all created (and destruction of) Backbone.Relational.Model.\n * Handles lookup for relations.\n */\nexport default BObject.extend({\n\tinitialize() {\n\t\tthis._collections = [];\n\t\tthis._reverseRelations = [];\n\t\tthis._orphanRelations = [];\n\t\tthis._subModels = [];\n\t\tthis._modelScopes = [ window ];\n\t},\n\n\t/**\n\t * Create a new `Relation`.\n\t * @param {Backbone.Relational.Model} [model]\n\t * @param {Object} relation\n\t * @param {Object} [options]\n\t */\n\tinitializeRelation: function( model, relation, options ) {\n\t\tlet { type: Type } = relation;\n\t\tif ( _.isString( Type ) ) {\n\t\t\tType = relationTypeStore.find( Type ) || this.getObjectByName( Type );\n\t\t}\n\n\t\tif ( _.isObject( Type ) ) {\n\t\t\tlet relationType = new Type( model, relation, options ); // Also pushes the new Relation into `model._relations`\n\t\t}\n\t\telse if ( config.showWarnings && console ) {\n\t\t\tconsole.warn( 'Relation=%o; missing or invalid relation type!', relation );\n\t\t}\n\t},\n\n\t/**\n\t * Add a scope for `getObjectByName` to look for model types by name.\n\t * @param {Object} scope\n\t */\n\taddModelScope: function( scope ) {\n\t\tthis._modelScopes.push( scope );\n\t},\n\n\t/**\n\t * Remove a scope.\n\t * @param {Object} scope\n\t */\n\tremoveModelScope: function( scope ) {\n\t\tthis._modelScopes = _.without( this._modelScopes, scope );\n\t},\n\n\t/**\n\t * Add a set of subModelTypes to the store, that can be used to resolve the '_superModel'\n\t * for a model later in 'setupSuperModel'.\n\t *\n\t * @param {Backbone.Relational.Model} subModelTypes\n\t * @param {Backbone.Relational.Model} superModelType\n\t */\n\taddSubModels: function( subModelTypes, superModelType ) {\n\t\tthis._subModels.push({\n\t\t\tsuperModelType,\n\t\t\tsubModels: subModelTypes\n\t\t});\n\t},\n\n\t/**\n\t * Check if the given modelType is registered as another model's subModel. If so, add it to the super model's\n\t * '_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.\n\t *\n\t * @param {Backbone.Relational.Model} modelType\n\t */\n\tsetupSuperModel: function( modelType ) {\n\t\t_.find( this._subModels, _.bind(function( subModelDef ) {\n\t\t\treturn _.filter( subModelDef.subModels || [], function( subModelTypeName, typeValue ) {\n\t\t\t\tvar subModelType = this.getObjectByName( subModelTypeName );\n\n\t\t\t\tif ( modelType === subModelType ) {\n\t\t\t\t\t// Set 'modelType' as a child of the found superModel\n\t\t\t\t\tsubModelDef.superModelType._subModels[ typeValue ] = modelType;\n\n\t\t\t\t\t// Set '_superModel', '_subModelTypeValue', and '_subModelTypeAttribute' on 'modelType'.\n\t\t\t\t\tmodelType._superModel = subModelDef.superModelType;\n\t\t\t\t\tmodelType._subModelTypeValue = typeValue;\n\t\t\t\t\tmodelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}, this ).length;\n\t\t}, this ));\n\t},\n\n\t/**\n\t * Add a reverse relation. Is added to the 'relations' property on model's prototype, and to\n\t * existing instances of 'model' in the store as well.\n\t * @param {Object} relation\n\t * @param {Backbone.Relational.Model} relation.model\n\t * @param {String} relation.type\n\t * @param {String} relation.key\n\t * @param {String|Object} relation.relatedModel\n\t */\n\taddReverseRelation: function( relation ) {\n\t\tvar exists = _.some( this._reverseRelations, function( rel ) {\n\t\t\treturn _.every( relation || [], function( val, key ) {\n\t\t\t\treturn val === rel[ key ];\n\t\t\t});\n\t\t});\n\n\t\tif ( !exists && relation.model && relation.type ) {\n\t\t\tthis._reverseRelations.push( relation );\n\t\t\tthis._addRelation( relation.model, relation );\n\t\t\tthis.retroFitRelation( relation );\n\t\t}\n\t},\n\n\t/**\n\t * Deposit a `relation` for which the `relatedModel` can't be resolved at the moment.\n\t *\n\t * @param {Object} relation\n\t */\n\taddOrphanRelation: function( relation ) {\n\t\tvar exists = _.some( this._orphanRelations, function( rel ) {\n\t\t\treturn _.every( relation || [], function( val, key ) {\n\t\t\t\treturn val === rel[ key ];\n\t\t\t});\n\t\t});\n\n\t\tif ( !exists && relation.model && relation.type ) {\n\t\t\tthis._orphanRelations.push( relation );\n\t\t}\n\t},\n\n\t/**\n\t * Try to initialize any `_orphanRelation`s\n\t */\n\tprocessOrphanRelations: function() {\n\t\t// Make sure to operate on a copy since we're removing while iterating\n\t\t_.each( this._orphanRelations.slice( 0 ), _.bind(function( rel ) {\n\t\t\tvar relatedModel = this.getObjectByName( rel.relatedModel );\n\t\t\tif ( relatedModel ) {\n\t\t\t\tthis.initializeRelation( null, rel );\n\t\t\t\tthis._orphanRelations = _.without( this._orphanRelations, rel );\n\t\t\t}\n\t\t}, this ));\n\t},\n\n\t/**\n\t *\n\t * @param {Backbone.Relational.Model.constructor} type\n\t * @param {Object} relation\n\t * @private\n\t */\n\t_addRelation: function( type, relation ) {\n\t\tif ( !type.prototype.relations ) {\n\t\t\ttype.prototype.relations = [];\n\t\t}\n\t\ttype.prototype.relations.push( relation );\n\n\t\t_.each( type._subModels || [], _.bind(function( subModel ) {\n\t\t\tthis._addRelation( subModel, relation );\n\t\t}, this ));\n\t},\n\n\t/**\n\t * Add a 'relation' to all existing instances of 'relation.model' in the store\n\t * @param {Object} relation\n\t */\n\tretroFitRelation: function( relation ) {\n\t\tlet { type: RelationType } = relation;\n\n\t\tvar coll = this.getCollection( relation.model, false );\n\t\tcoll && coll.each( _.bind(function( model ) {\n\t\t\tif ( !( model instanceof relation.model ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet relationType = new RelationType( model, relation );\n\t\t}, this ));\n\t},\n\n\t/**\n\t * Find the Store's collection for a certain type of model.\n\t * @param {Backbone.Relational.Model} type\n\t * @param {Boolean} [create=true] Should a collection be created if none is found?\n\t * @return {Backbone.Relational.Collection} A collection if found (or applicable for 'model'), or null\n\t */\n\tgetCollection: function( type, create ) {\n\t\tif ( type instanceof BBModel ) {\n\t\t\ttype = type.constructor;\n\t\t}\n\n\t\tvar rootModel = type;\n\t\twhile ( rootModel._superModel ) {\n\t\t\trootModel = rootModel._superModel;\n\t\t}\n\n\t\tvar coll = _.find( this._collections, function( item ) {\n\t\t\treturn item.model === rootModel;\n\t\t});\n\n\t\tif ( !coll && create !== false ) {\n\t\t\tcoll = this._createCollection( rootModel );\n\t\t}\n\n\t\treturn coll;\n\t},\n\n\t/**\n\t * Find a model type on one of the modelScopes by name. Names are split on dots.\n\t * @param {String} name\n\t * @return {Object}\n\t */\n\tgetObjectByName: function( name ) {\n\t\tvar parts = name.split( '.' ),\n\t\t\ttype = null;\n\n\t\t_.find( this._modelScopes, _.bind(function( scope ) {\n\t\t\ttype = _.reduce( parts || [], function( memo, val ) {\n\t\t\t\treturn memo ? memo[ val ] : undefined;\n\t\t\t}, scope );\n\n\t\t\tif ( type && type !== scope ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}, this ));\n\n\t\treturn type;\n\t},\n\n\t_createCollection: function( type ) {\n\t\t// If 'type' is an instance, take its constructor\n\t\tif ( !_.isObject( type ) ) {\n\t\t\ttype = type.constructor;\n\t\t}\n\n\t\t// Type should inherit from Backbone.Relational.Model.\n\t\t// if ( type.prototype instanceof Backbone.Relational.Model ) {\n\t\tlet coll = new Collection();\n\t\tcoll.model = type;\n\n\t\tthis._collections.push( coll );\n\t\t// }\n\n\t\treturn coll;\n\t},\n\n\t/**\n\t * Find the attribute that is to be used as the `id` on a given object\n\t * @param type\n\t * @param {String|Number|Object|Backbone.Relational.Model} item\n\t * @return {String|Number}\n\t */\n\tresolveIdForItem: function( type, item = null ) {\n\t\tif ( item === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( _.isString( item ) || _.isNumber( item ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\treturn item.id || item[ type.prototype.idAttribute ] || null;\n\t},\n\n\t/**\n\t * Find a specific model of a certain `type` in the store\n\t * @param type\n\t * @param {String|Number|Object|Backbone.Relational.Model} item\n\t */\n\tfind: function( type, item ) {\n\t\tvar id = this.resolveIdForItem( type, item ),\n\t\t\tcoll = this.getCollection( type );\n\n\t\t// Because the found object could be of any of the type's superModel\n\t\t// types, only return it if it's actually of the type asked for.\n\t\tif ( coll ) {\n\t\t\tvar obj = coll.get( id );\n\n\t\t\tif ( obj instanceof type ) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Add a 'model' to its appropriate collection. Retain the original contents of 'model.collection'.\n\t * @param {Backbone.Relational.Model} model\n\t */\n\tregister: function( model ) {\n\t\tvar coll = this.getCollection( model );\n\n\t\tif ( coll ) {\n\t\t\tvar modelColl = model.collection;\n\t\t\tcoll.add( model );\n\t\t\tmodel.collection = modelColl;\n\t\t}\n\t},\n\n\t/**\n\t * Check if the given model may use the given `id`\n\t * @param model\n\t * @param [id]\n\t */\n\tcheckId: function( model, id ) {\n\t\tvar coll = this.getCollection( model ),\n\t\t\tduplicate = coll && coll.get( id );\n\n\t\tif ( duplicate && model !== duplicate ) {\n\t\t\tif ( config.showWarnings && console ) {\n\t\t\t\tconsole.warn( 'Duplicate id! Old RelationalModel=%o, new RelationalModel=%o', duplicate, model );\n\t\t\t}\n\n\t\t\tthrow new Error( \"Cannot instantiate more than one Backbone.Relational.Model with the same id per type!\" );\n\t\t}\n\t},\n\n\t/**\n\t * Explicitly update a model's id in its store collection\n\t * @param {Backbone.Relational.Model} model\n\t */\n\tupdate: function( model ) {\n\t\tvar coll = this.getCollection( model );\n\n\t\t// Register a model if it isn't yet (which happens if it was created without an id).\n\t\tif ( !coll.includes( model ) ) {\n\t\t\tthis.register( model );\n\t\t}\n\n\t\t// This triggers updating the lookup indices kept in a collection\n\t\tcoll._onModelEvent( 'change:' + model.idAttribute, model, coll );\n\n\t\t// Trigger an event on model so related models (having the model's new id in their keyContents) can add it.\n\t\tmodel.trigger( 'relational:change:id', model, coll );\n\t},\n\n\t/**\n\t * Unregister from the store: a specific model, a collection, or a model type.\n\t * @param {Backbone.Relational.Model|Backbone.Relational.Model.constructor|Backbone.Relational.Collection} type\n\t */\n\tunregister: function( type ) {\n\t\tlet coll;\n\t\tlet models = _.clone( type.models );\n\t\tif ( type.model ) {\n\t\t\tcoll = this.getCollection( type.model );\n\t\t}\n\t\telse {\n\t\t\tcoll = this.getCollection( type );\n\t\t\tmodels = _.clone( coll.models );\n\t\t}\n\n\t\tif ( type instanceof BBModel ) {\n\t\t\tmodels = [ type ];\n\t\t}\n\n\t\t_.each( models, _.bind(function( model ) {\n\t\t\tthis.stopListening( model );\n\t\t\t_.invoke( model.getRelations(), 'stopListening' );\n\t\t}, this ));\n\n\t\t// If we've unregistered an entire store collection, reset the collection (which is much faster).\n\t\t// Otherwise, remove each model one by one.\n\t\tif ( _.includes( this._collections, type ) ) {\n\t\t\tcoll.reset( [] );\n\t\t}\n\t\telse {\n\t\t\t_.each( models, _.bind(function( model ) {\n\t\t\t\tif ( coll.get( model ) ) {\n\t\t\t\t\tcoll.remove( model );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcoll.trigger( 'relational:remove', model, coll );\n\t\t\t\t}\n\t\t\t}, this ));\n\t\t}\n\t},\n\n\t/**\n\t * Reset the `store` to it's original state. The `reverseRelations` are kept though, since attempting to\n\t * re-initialize these on models would lead to a large amount of warnings.\n\t */\n\treset: function() {\n\t\tthis.stopListening();\n\n\t\t// Unregister each collection to remove event listeners\n\t\t_.each( this._collections, _.bind(function( coll ) {\n\t\t\tthis.unregister( coll );\n\t\t}, this ));\n\n\t\tthis._collections = [];\n\t\tthis._subModels = [];\n\t\tthis._modelScopes = [ window ];\n\t}\n});\n","import Store from './utils/store';\n\nexport default new Store();\n","import _ from 'underscore';\nimport Semaphore from './utils/semaphore';\nimport BObject from './utils/object';\nimport relationTypeStore from './relation-type-store';\nimport store from './store';\nimport config from './config';\n\n/**\n * The main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\n * are used to regulate addition and removal of models from relations.\n *\n * @param {Backbone.Relational.Model} [instance] Model that this relation is created for. If no model is supplied,\n *      Relation just tries to instantiate it's `reverseRelation` if specified, and bails out after that.\n * @param {Object} options\n * @param {string} options.key\n * @param {Backbone.Relational.Model.constructor} options.relatedModel\n * @param {Boolean|String} [options.includeInJSON=true] Serialize the given attribute for related model(s)' in toJSON, or just their ids.\n * @param {Boolean} [options.createModels=true] Create objects from the contents of keys if the object is not found in Backbone.store.\n * @param {Object} [options.reverseRelation] Specify a bi-directional relation. If provided, Relation will reciprocate\n *    the relation to the 'relatedModel'. Required and optional properties match 'options', except that it also needs\n *    {Backbone.Relation|String} type ('HasOne' or 'HasMany').\n * @param {Object} opts\n */\nexport default BObject.extend( Semaphore ).extend({\n\tinstance: null,\n\tkey: null,\n\tkeyContents: null,\n\trelatedModel: null,\n\trelatedCollection: null,\n\treverseRelation: null,\n\trelated: null,\n\n\tconstructor( instance, options, opts ) {\n\t\tthis.instance = instance;\n\t\t// Make sure 'options' is sane, and fill with defaults from subclasses and this object's prototype\n\t\toptions = _.isObject( options ) ? options : {};\n\t\tthis.reverseRelation = _.defaults( options.reverseRelation || {}, this.options.reverseRelation );\n\t\tthis.options = _.defaults( options, this.options, {\n\t\t\tcreateModels: true,\n\t\t\tincludeInJSON: true,\n\t\t\tisAutoRelation: false,\n\t\t\tautoFetch: false,\n\t\t\tparse: false\n\t\t});\n\n\t\t// TODO: handle this logic else where. it's crazy to have a parent depend on its children!!\n\t\tif ( _.isString( this.reverseRelation.type ) ) {\n\t\t\tthis.reverseRelation.type = relationTypeStore.find( this.reverseRelation.type ) || store.getObjectByName( this.reverseRelation.type );\n\t\t}\n\n\t\tthis.key = this.options.key;\n\t\tthis.keySource = this.options.keySource || this.key;\n\t\tthis.keyDestination = this.options.keyDestination || this.keySource || this.key;\n\n\t\tthis.model = this.options.model || this.instance.constructor;\n\n\t\tthis.relatedModel = this.options.relatedModel;\n\n\t\tif ( _.isUndefined( this.relatedModel ) ) {\n\t\t\tthis.relatedModel = this.model;\n\t\t}\n\n\t\t// if ( _.isFunction( this.relatedModel ) && !( this.relatedModel.prototype instanceof Backbone.Model ) ) {\n\t\t// \tthis.relatedModel = _.result( this, 'relatedModel' );\n\t\t// }\n\t\tif ( _.isString( this.relatedModel ) ) {\n\t\t\tthis.relatedModel = store.getObjectByName( this.relatedModel );\n\t\t}\n\n\t\tif ( !this.checkPreconditions() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add the reverse relation on 'relatedModel' to the store's reverseRelations\n\t\tif ( !this.options.isAutoRelation && this.reverseRelation.type && this.reverseRelation.key ) {\n\t\t\tstore.addReverseRelation( _.defaults({\n\t\t\t\t\tisAutoRelation: true,\n\t\t\t\t\tmodel: this.relatedModel,\n\t\t\t\t\trelatedModel: this.model,\n\t\t\t\t\treverseRelation: this.options // current relation is the 'reverseRelation' for its own reverseRelation\n\t\t\t\t},\n\t\t\t\tthis.reverseRelation // Take further properties from this.reverseRelation (type, key, etc.)\n\t\t\t) );\n\t\t}\n\n\t\tif ( instance ) {\n\t\t\tvar contentKey = this.keySource;\n\t\t\tif ( contentKey !== this.key && _.isObject( this.instance.get( this.key ) ) ) {\n\t\t\t\tcontentKey = this.key;\n\t\t\t}\n\n\t\t\tthis.setKeyContents( this.instance.get( contentKey ) );\n\t\t\tthis.relatedCollection = store.getCollection( this.relatedModel );\n\n\t\t\t// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.\n\t\t\tif ( this.keySource !== this.key ) {\n\t\t\t\tdelete this.instance.attributes[ this.keySource ];\n\t\t\t}\n\n\t\t\t// Add this Relation to instance._relations\n\t\t\tthis.instance._relations[ this.key ] = this;\n\n\t\t\tthis.initialize( opts );\n\n\t\t\tif ( this.options.autoFetch ) {\n\t\t\t\tthis.instance.getAsync( this.key, _.isObject( this.options.autoFetch ) ? this.options.autoFetch : {} );\n\t\t\t}\n\n\t\t\t// When 'relatedModel' are created or destroyed, check if it affects this relation.\n\t\t\tthis.listenTo( this.instance, 'destroy', this.destroy )\n\t\t\t\t.listenTo( this.relatedCollection, 'relational:add relational:change:id', this.tryAddRelated )\n\t\t\t\t.listenTo( this.relatedCollection, 'relational:remove', this.removeRelated );\n\t\t}\n\t},\n\n\t/**\n\t * Check several pre-conditions.\n\t * @return {Boolean} True if pre-conditions are satisfied, false if they're not.\n\t */\n\tcheckPreconditions: function() {\n\t\tvar i = this.instance,\n\t\t\tk = this.key,\n\t\t\tm = this.model,\n\t\t\trm = this.relatedModel,\n\t\t\twarn = config.showWarnings && typeof console !== 'undefined';\n\n\t\tif ( !m || !k || !rm ) {\n\t\t\twarn && console.warn( 'Relation=%o: missing model, key or relatedModel (%o, %o, %o).', this, m, k, rm );\n\t\t\treturn false;\n\t\t}\n\t\t// Check if the type in 'model' inherits from Backbone.Relational.Model\n\t\t// if ( !( m.prototype instanceof module.Model ) ) {\n\t\t// \twarn && console.warn( 'Relation=%o: model does not inherit from Backbone.Relational.Model (%o).', this, i );\n\t\t// \treturn false;\n\t\t// }\n\t\t// Check if the type in 'relatedModel' inherits from Backbone.Relational.Model\n\t\t// if ( !( rm.prototype instanceof module.Model ) ) {\n\t\t// \twarn && console.warn( 'Relation=%o: relatedModel does not inherit from Backbone.Relational.Model (%o).', this, rm );\n\t\t// \treturn false;\n\t\t// }\n\t\t// Check if this is not a HasMany, and the reverse relation is HasMany as well\n\t\t// TODO: handle this logic elsewhere!\n\t\tif ( this instanceof relationTypeStore.find( 'HasMany' ) && this.reverseRelation.type === relationTypeStore.find( 'HasMany' ) ) {\n\t\t\twarn && console.warn( 'Relation=%o: relation is a HasMany, and the reverseRelation is HasMany as well.', this );\n\t\t\treturn false;\n\t\t}\n\t\t// Check if we're not attempting to create a relationship on a `key` that's already used.\n\t\tif ( i && _.keys( i._relations ).length ) {\n\t\t\tvar existing = _.find( i._relations, _.bind(function( rel ) {\n\t\t\t\treturn rel.key === k;\n\t\t\t}, this ));\n\n\t\t\tif ( existing ) {\n\t\t\t\twarn && console.warn( 'Cannot create relation=%o on %o for model=%o: already taken by relation=%o.',\n\t\t\t\t\tthis, k, i, existing );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Set the related model(s) for this relation\n\t * @param {Backbone.Model|Backbone.Relational.Collection} related\n\t */\n\tsetRelated: function( related ) {\n\t\tthis.related = related;\n\t\tthis.instance.attributes[ this.key ] = related;\n\t},\n\n\t/**\n\t * Determine if a relation (on a different RelationalModel) is the reverse\n\t * relation of the current one.\n\t * @param {Backbone.Relation} relation\n\t * @return {Boolean}\n\t */\n\t_isReverseRelation: function( relation ) {\n\t\treturn relation.instance instanceof this.relatedModel && this.reverseRelation.key === relation.key &&\n\t\t\tthis.key === relation.reverseRelation.key;\n\t},\n\n\t/**\n\t * Get the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).\n\t * @param {Backbone.Relational.Model} [model] Get the reverse relations for a specific model.\n\t *    If not specified, 'this.related' is used.\n\t * @return {Backbone.Relation[]}\n\t */\n\tgetReverseRelations: function( model ) {\n\t\tvar reverseRelations = [];\n\t\t// Iterate over 'model', 'this.related.models' (if this.related is a Backbone.Relational.Collection), or wrap 'this.related' in an array.\n\t\tvar models = !_.isUndefined( model ) ? [ model ] : this.related && ( this.related.models || [ this.related ] ),\n\t\t\trelations = null,\n\t\t\trelation = null;\n\n\t\tfor ( var i = 0; i < ( models || [] ).length; i++ ) {\n\t\t\trelations = models[ i ].getRelations() || [];\n\n\t\t\tfor ( var j = 0; j < relations.length; j++ ) {\n\t\t\t\trelation = relations[ j ];\n\n\n\t\t\t\tif ( this._isReverseRelation( relation ) ) {\n\t\t\t\t\treverseRelations.push( relation );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn reverseRelations;\n\t},\n\n\t/**\n\t * When `this.instance` is destroyed, cleanup our relations.\n\t * Get reverse relation, call removeRelated on each.\n\t */\n\tdestroy: function() {\n\t\tthis.stopListening();\n\n\t\tif ( this instanceof relationTypeStore.find( 'HasOne' ) ) {\n\t\t\tthis.setRelated( null );\n\t\t}\n\t\telse if ( this instanceof relationTypeStore.find( 'HasMany' ) ) {\n\t\t\tthis.setRelated( this._prepareCollection() );\n\t\t}\n\n\t\t_.each( this.getReverseRelations(), _.bind(function( relation ) {\n\t\t\trelation.removeRelated( this.instance );\n\t\t}, this ));\n\t}\n});\n","import _ from 'underscore';\nimport Relation from './relation';\nimport store from './store';\nimport eventQueue from './event-queue';\n\nexport default Relation.extend({\n\toptions: {\n\t\treverseRelation: { type: 'HasMany' }\n\t},\n\n\tinitialize: function( opts ) {\n\t\tthis.listenTo( this.instance, 'relational:change:' + this.key, this.onChange );\n\n\t\tvar related = this.findRelated( opts );\n\t\tthis.setRelated( related );\n\n\t\t// Notify new 'related' object of the new relation.\n\t\t_.each( this.getReverseRelations(), _.bind(function( relation ) {\n\t\t\trelation.addRelated( this.instance, opts );\n\t\t}, this ));\n\t},\n\n\t/**\n\t * Find related Models.\n\t * @param {Object} [options]\n\t * @return {Backbone.Model}\n\t */\n\tfindRelated: function( options ) {\n\t\tvar related = null;\n\n\t\toptions = _.defaults({ parse: this.options.parse }, options );\n\n\t\tif ( this.keyContents instanceof this.relatedModel ) {\n\t\t\trelated = this.keyContents;\n\t\t}\n\t\telse if ( this.keyContents || this.keyContents === 0 ) { // since 0 can be a valid `id` as well\n\t\t\tvar opts = _.defaults({ create: this.options.createModels }, options );\n\t\t\trelated = this.relatedModel.findOrCreate( this.keyContents, opts );\n\t\t}\n\n\t\t// Nullify `keyId` if we have a related model; in case it was already part of the relation\n\t\tif ( related ) {\n\t\t\tthis.keyId = null;\n\t\t}\n\n\t\treturn related;\n\t},\n\n\t/**\n\t * Normalize and reduce `keyContents` to an `id`, for easier comparison\n\t * @param {String|Number|Backbone.Model} keyContents\n\t */\n\tsetKeyContents: function( keyContents ) {\n\t\tthis.keyContents = keyContents;\n\t\tthis.keyId = store.resolveIdForItem( this.relatedModel, this.keyContents );\n\t},\n\n\t/**\n\t * Event handler for `change:<key>`.\n\t * If the key is changed, notify old & new reverse relations and initialize the new relation.\n\t */\n\tonChange: function( model, attr, options ) {\n\t\t// Don't accept recursive calls to onChange (like onChange->findRelated->findOrCreate->initializeRelations->addRelated->onChange)\n\t\tif ( this.isLocked() ) {\n\t\t\treturn;\n\t\t}\n\t\tthis.acquire();\n\t\toptions = options ? _.clone( options ) : {};\n\n\t\t// 'options.__related' is set by 'addRelated'/'removeRelated'. If it is set, the change\n\t\t// is the result of a call from a relation. If it's not, the change is the result of\n\t\t// a 'set' call on this.instance.\n\t\tvar changed = _.isUndefined( options.__related ),\n\t\t\toldRelated = changed ? this.related : options.__related;\n\n\t\tif ( changed ) {\n\t\t\tthis.setKeyContents( attr );\n\t\t\tvar related = this.findRelated( options );\n\t\t\tthis.setRelated( related );\n\t\t}\n\n\t\t// Notify old 'related' object of the terminated relation\n\t\tif ( oldRelated && this.related !== oldRelated ) {\n\t\t\t_.each( this.getReverseRelations( oldRelated ), _.bind(function( relation ) {\n\t\t\t\trelation.removeRelated( this.instance, null, options );\n\t\t\t}, this ));\n\t\t}\n\n\t\t// Notify new 'related' object of the new relation. Note we do re-apply even if this.related is oldRelated;\n\t\t// that can be necessary for bi-directional relations if 'this.instance' was created after 'this.related'.\n\t\t// In that case, 'this.instance' will already know 'this.related', but the reverse might not exist yet.\n\t\t_.each( this.getReverseRelations(), _.bind(function( relation ) {\n\t\t\trelation.addRelated( this.instance, options );\n\t\t}, this ));\n\n\t\t// Fire the 'change:<key>' event if 'related' was updated\n\t\tif ( !options.silent && this.related !== oldRelated ) {\n\t\t\tvar dit = this;\n\t\t\tthis.changed = true;\n\t\t\teventQueue.add( function() {\n\t\t\t\tdit.instance.trigger( 'change:' + dit.key, dit.instance, dit.related, options, true );\n\t\t\t\tdit.changed = false;\n\t\t\t});\n\t\t}\n\t\tthis.release();\n\t},\n\n\t/**\n\t * If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'\n\t */\n\ttryAddRelated: function( model, coll, options ) {\n\t\tif ( ( this.keyId || this.keyId === 0 ) && model.id === this.keyId ) { // since 0 can be a valid `id` as well\n\t\t\tthis.addRelated( model, options );\n\t\t\tthis.keyId = null;\n\t\t}\n\t},\n\n\taddRelated: function( model, options ) {\n\t\t// Allow 'model' to set up its relations before proceeding.\n\t\t// (which can result in a call to 'addRelated' from a relation of 'model')\n\t\tvar dit = this;\n\t\tmodel.queue( function() {\n\t\t\tif ( model !== dit.related ) {\n\t\t\t\tvar oldRelated = dit.related || null;\n\t\t\t\tdit.setRelated( model );\n\t\t\t\tdit.onChange( dit.instance, model, _.defaults({ __related: oldRelated }, options ) );\n\t\t\t}\n\t\t});\n\t},\n\n\tremoveRelated: function( model, coll, options ) {\n\t\tif ( !this.related ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( model === this.related ) {\n\t\t\tvar oldRelated = this.related || null;\n\t\t\tthis.setRelated( null );\n\t\t\tthis.onChange( this.instance, model, _.defaults({ __related: oldRelated }, options ) );\n\t\t}\n\t}\n});\n","import _ from 'underscore';\nimport Relation from './relation';\nimport store from './store';\nimport eventQueue from './event-queue';\nimport Collection from './collection';\nimport config from './config';\n\nexport default Relation.extend({\n\tcollectionType: null,\n\n\toptions: {\n\t\treverseRelation: { type: 'HasOne' },\n\t\tcollectionType: Collection,\n\t\tcollectionKey: true,\n\t\tcollectionOptions: {}\n\t},\n\n\tinitialize: function( opts ) {\n\t\tthis.listenTo( this.instance, 'relational:change:' + this.key, this.onChange );\n\n\t\t// Handle a custom 'collectionType'\n\t\tthis.collectionType = this.options.collectionType;\n\t\tif ( _.isFunction( this.collectionType ) && this.collectionType !== Collection && !( this.collectionType.prototype instanceof Collection ) ) {\n\t\t\tthis.collectionType = _.result( this, 'collectionType' );\n\t\t}\n\t\tif ( _.isString( this.collectionType ) ) {\n\t\t\tthis.collectionType = store.getObjectByName( this.collectionType );\n\t\t}\n\t\tif ( this.collectionType !== Collection && !( this.collectionType.prototype instanceof Collection ) ) {\n\t\t\tthrow new Error( '`collectionType` must inherit from Collection' );\n\t\t}\n\n\t\tvar related = this.findRelated( opts );\n\t\tthis.setRelated( related );\n\t},\n\n\t/**\n\t * Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\n\t * If no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.\n\t * @param {Collection} [collection]\n\t * @return {Collection}\n\t */\n\t_prepareCollection: function( collection ) {\n\t\tif ( this.related ) {\n\t\t\tthis.stopListening( this.related );\n\t\t}\n\n\t\tif ( !collection || !( collection instanceof Collection ) ) {\n\t\t\tvar options = _.isFunction( this.options.collectionOptions ) ?\n\t\t\t\tthis.options.collectionOptions( this.instance ) : this.options.collectionOptions;\n\n\t\t\tcollection = new this.collectionType( null, options );\n\t\t}\n\n\t\tcollection.model = this.relatedModel;\n\n\t\tif ( this.options.collectionKey ) {\n\t\t\tvar key = this.options.collectionKey === true ? this.options.reverseRelation.key : this.options.collectionKey;\n\n\t\t\tif ( collection[ key ] && collection[ key ] !== this.instance ) {\n\t\t\t\tif ( config.showWarnings && typeof console !== 'undefined' ) {\n\t\t\t\t\tconsole.warn( 'Relation=%o; collectionKey=%s already exists on collection=%o', this, key, this.options.collectionKey );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( key ) {\n\t\t\t\tcollection[ key ] = this.instance;\n\t\t\t}\n\t\t}\n\n\t\tthis.listenTo( collection, 'relational:add', this.handleAddition )\n\t\t\t.listenTo( collection, 'relational:remove', this.handleRemoval )\n\t\t\t.listenTo( collection, 'relational:reset', this.handleReset );\n\n\t\treturn collection;\n\t},\n\n\t/**\n\t * Find related Models.\n\t * @param {Object} [options]\n\t * @return {Collection}\n\t */\n\tfindRelated: function( options ) {\n\t\tvar related = null;\n\n\t\toptions = _.defaults( { parse: this.options.parse }, options );\n\n\t\t// Replace 'this.related' by 'this.keyContents' if it is a Collection\n\t\tif ( this.keyContents instanceof Collection ) {\n\t\t\tthis._prepareCollection( this.keyContents );\n\t\t\trelated = this.keyContents;\n\t\t}\n\t\t// Otherwise, 'this.keyContents' should be an array of related object ids.\n\t\t// Re-use the current 'this.related' if it is a Collection; otherwise, create a new collection.\n\t\telse {\n\t\t\tvar toAdd = [];\n\n\t\t\t_.each( this.keyContents, _.bind(function( attributes ) {\n\t\t\t\tvar model = null;\n\n\t\t\t\tif ( attributes instanceof this.relatedModel ) {\n\t\t\t\t\tmodel = attributes;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// If `merge` is true, update models here, instead of during update.\n\t\t\t\t\tmodel = ( _.isObject( attributes ) && options.parse && this.relatedModel.prototype.parse ) ?\n\t\t\t\t\t\tthis.relatedModel.prototype.parse( _.clone( attributes ), options ) : attributes;\n\t\t\t\t}\n\n\t\t\t\tmodel && toAdd.push( model );\n\t\t\t}, this ));\n\n\t\t\tif ( this.related instanceof Collection ) {\n\t\t\t\trelated = this.related;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trelated = this._prepareCollection();\n\t\t\t}\n\n\t\t\t// By now, `parse` will already have been executed just above for models if specified.\n\t\t\t// Disable to prevent additional calls.\n\t\t\trelated.set( toAdd, _.defaults( { parse: false }, options ) );\n\t\t}\n\n\t\t// Remove entries from `keyIds` that were already part of the relation (and are thus 'unchanged')\n\t\tthis.keyIds = _.difference( this.keyIds, _.map( related.models, 'id' ) );\n\n\t\treturn related;\n\t},\n\n\t/**\n\t * Normalize and reduce `keyContents` to a list of `ids`, for easier comparison\n\t * @param {String|Number|String[]|Number[]|Collection} keyContents\n\t */\n\tsetKeyContents: function( keyContents ) {\n\t\tthis.keyContents = keyContents instanceof Collection ? keyContents : null;\n\t\tthis.keyIds = [];\n\n\t\tif ( !this.keyContents && ( keyContents || keyContents === 0 ) ) { // since 0 can be a valid `id` as well\n\t\t\t// Handle cases the an API/user supplies just an Object/id instead of an Array\n\t\t\tthis.keyContents = _.isArray( keyContents ) ? keyContents : [ keyContents ];\n\n\t\t\t_.each( this.keyContents, _.bind(function( item ) {\n\t\t\t\tvar itemId = store.resolveIdForItem( this.relatedModel, item );\n\t\t\t\tif ( itemId || itemId === 0 ) {\n\t\t\t\t\tthis.keyIds.push( itemId );\n\t\t\t\t}\n\t\t\t}, this ));\n\t\t}\n\t},\n\n\t/**\n\t * Event handler for `change:<key>`.\n\t * If the contents of the key are changed, notify old & new reverse relations and initialize the new relation.\n\t */\n\tonChange: function( model, attr, options ) {\n\t\toptions = options ? _.clone( options ) : {};\n\t\tthis.setKeyContents( attr );\n\t\tthis.changed = false;\n\n\t\tvar related = this.findRelated( options );\n\t\tthis.setRelated( related );\n\n\t\tif ( !options.silent ) {\n\t\t\tvar dit = this;\n\t\t\teventQueue.add( function() {\n\t\t\t\t// The `changed` flag can be set in `handleAddition` or `handleRemoval`\n\t\t\t\tif ( dit.changed ) {\n\t\t\t\t\tdit.instance.trigger( 'change:' + dit.key, dit.instance, dit.related, options, true );\n\t\t\t\t\tdit.changed = false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * When a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n\t * (should be 'HasOne', must set 'this.instance' as their related).\n\t */\n\thandleAddition: function( model, coll, options ) {\n\t\t//console.debug('handleAddition called; args=%o', arguments);\n\t\toptions = options ? _.clone( options ) : {};\n\t\tthis.changed = true;\n\n\t\t_.each( this.getReverseRelations( model ), _.bind(function( relation ) {\n\t\t\trelation.addRelated( this.instance, options );\n\t\t}, this ));\n\n\t\t// Only trigger 'add' once the newly added model is initialized (so, has its relations set up)\n\t\tvar dit = this;\n\t\t!options.silent && eventQueue.add( function() {\n\t\t\tdit.instance.trigger( 'add:' + dit.key, model, dit.related, options );\n\t\t});\n\t},\n\n\t/**\n\t * When a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n\t * (should be 'HasOne', which should be nullified)\n\t */\n\thandleRemoval: function( model, coll, options ) {\n\t\t//console.debug('handleRemoval called; args=%o', arguments);\n\t\toptions = options ? _.clone( options ) : {};\n\t\tthis.changed = true;\n\n\t\t_.each( this.getReverseRelations( model ), _.bind(function( relation ) {\n\t\t\trelation.removeRelated( this.instance, null, options );\n\t\t}, this ));\n\n\t\tvar dit = this;\n\t\t!options.silent && eventQueue.add( function() {\n\t\t\tdit.instance.trigger( 'remove:' + dit.key, model, dit.related, options );\n\t\t});\n\t},\n\n\thandleReset: function( coll, options ) {\n\t\tvar dit = this;\n\t\toptions = options ? _.clone( options ) : {};\n\t\t!options.silent && eventQueue.add( function() {\n\t\t\tdit.instance.trigger( 'reset:' + dit.key, dit.related, options );\n\t\t});\n\t},\n\n\ttryAddRelated: function( model, coll, options ) {\n\t\tvar item = _.includes( this.keyIds, model.id );\n\n\t\tif ( item ) {\n\t\t\tthis.addRelated( model, options );\n\t\t\tthis.keyIds = _.without( this.keyIds, model.id );\n\t\t}\n\t},\n\n\taddRelated: function( model, options ) {\n\t\t// Allow 'model' to set up its relations before proceeding.\n\t\t// (which can result in a call to 'addRelated' from a relation of 'model')\n\t\tvar dit = this;\n\t\tmodel.queue( function() {\n\t\t\tif ( dit.related && !dit.related.get( model ) ) {\n\t\t\t\tdit.related.add( model, _.defaults( { parse: false }, options ) );\n\t\t\t}\n\t\t});\n\t},\n\n\tremoveRelated: function( model, coll, options ) {\n\t\tif ( this.related.get( model ) ) {\n\t\t\tthis.related.remove( model, options );\n\t\t}\n\t}\n});\n","import { Model as BBModel } from 'backbone';\nimport _ from 'underscore';\nimport Semaphore from './utils/semaphore';\nimport store from './store';\nimport eventQueue from './event-queue';\nimport BlockingQueue from './utils/blocking-queue';\nimport Relation from './relation';\nimport Collection from './collection';\nimport $ from 'jquery';\nimport relationTypeStore from './relation-type-store';\n\n/**\n * A type of Backbone.Model that also maintains relations to other models and collections.\n * New events when compared to the original:\n *  - 'add:<key>' (model, related collection, options)\n *  - 'remove:<key>' (model, related collection, options)\n *  - 'change:<key>' (model, related model or collection, options)\n */\nexport default BBModel.extend( Semaphore ).extend({\n\trelations: null, // Relation descriptions on the prototype\n\t_relations: null, // Relation instances\n\t_isInitialized: false,\n\t_deferProcessing: false,\n\t_queue: null,\n\t_attributeChangeFired: false, // Keeps track of `change` event firing under some conditions (like nested `set`s)\n\n\tsubModelTypeAttribute: 'type',\n\tsubModelTypes: null,\n\n\tconstructor: function( attributes, options ) {\n\t\t// Nasty hack, for cases like 'model.get( <HasMany key> ).add( item )'.\n\t\t// Defer 'processQueue', so that when 'Relation.createModels' is used we trigger 'HasMany'\n\t\t// collection events only after the model is really fully set up.\n\t\t// Example: event for \"p.on( 'add:jobs' )\" -> \"p.get('jobs').add( { company: c.id, person: p.id } )\".\n\t\tif ( options && options.collection ) {\n\t\t\tvar dit = this,\n\t\t\t\tcollection = this.collection = options.collection;\n\n\t\t\t// Prevent `collection` from cascading down to nested models; they shouldn't go into this `if` clause.\n\t\t\tdelete options.collection;\n\n\t\t\tthis._deferProcessing = true;\n\n\t\t\tvar processQueue = function( model ) {\n\t\t\t\tif ( model === dit ) {\n\t\t\t\t\tdit._deferProcessing = false;\n\t\t\t\t\tdit.processQueue();\n\t\t\t\t\tcollection.off( 'relational:add', processQueue );\n\t\t\t\t}\n\t\t\t};\n\t\t\tcollection.on( 'relational:add', processQueue );\n\n\t\t\t// So we do process the queue eventually, regardless of whether this model actually gets added to 'options.collection'.\n\t\t\t_.defer( function() {\n\t\t\t\tprocessQueue( dit );\n\t\t\t});\n\t\t}\n\n\t\tstore.processOrphanRelations();\n\t\tstore.listenTo( this, 'relational:unregister', store.unregister );\n\n\t\tthis._queue = new BlockingQueue();\n\t\tthis._queue.block();\n\t\teventQueue.block();\n\n\t\ttry {\n\t\t\tBBModel.apply( this, arguments );\n\t\t}\n\t\tfinally {\n\t\t\t// Try to run the global queue holding external events\n\t\t\teventQueue.unblock();\n\t\t}\n\t},\n\n\t/**\n\t * Override 'trigger' to queue 'change' and 'change:*' events\n\t */\n\ttrigger: function( eventName ) {\n\t\tif ( eventName.length > 5 && eventName.indexOf( 'change' ) === 0 ) {\n\t\t\tvar dit = this,\n\t\t\t\targs = arguments;\n\n\t\t\tif ( !eventQueue.isLocked() ) {\n\t\t\t\t// If we're not in a more complicated nested scenario, fire the change event right away\n\t\t\t\tBBModel.prototype.trigger.apply( dit, args );\n\t\t\t}\n\t\t\telse {\n\t\t\t\teventQueue.add( function() {\n\t\t\t\t\t// Determine if the `change` event is still valid, now that all relations are populated\n\t\t\t\t\tvar changed = true;\n\t\t\t\t\tif ( eventName === 'change' ) {\n\t\t\t\t\t\t// `hasChanged` may have gotten reset by nested calls to `set`.\n\t\t\t\t\t\tchanged = dit.hasChanged() || dit._attributeChangeFired;\n\t\t\t\t\t\tdit._attributeChangeFired = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar attr = eventName.slice( 7 ),\n\t\t\t\t\t\t\trel = dit.getRelation( attr );\n\n\t\t\t\t\t\tif ( rel ) {\n\t\t\t\t\t\t\t// If `attr` is a relation, `change:attr` get triggered from `Relation.onChange`.\n\t\t\t\t\t\t\t// These take precedence over `change:attr` events triggered by `Model.set`.\n\t\t\t\t\t\t\t// The relation sets a fourth attribute to `true`. If this attribute is present,\n\t\t\t\t\t\t\t// continue triggering this event; otherwise, it's from `Model.set` and should be stopped.\n\t\t\t\t\t\t\tchanged = ( args[ 4 ] === true );\n\n\t\t\t\t\t\t\t// If this event was triggered by a relation, set the right value in `this.changed`\n\t\t\t\t\t\t\t// (a Collection or Model instead of raw data).\n\t\t\t\t\t\t\tif ( changed ) {\n\t\t\t\t\t\t\t\tdit.changed[ attr ] = args[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Otherwise, this event is from `Model.set`. If the relation doesn't report a change,\n\t\t\t\t\t\t\t// remove attr from `dit.changed` so `hasChanged` doesn't take it into account.\n\t\t\t\t\t\t\telse if ( !rel.changed ) {\n\t\t\t\t\t\t\t\tdelete dit.changed[ attr ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( changed ) {\n\t\t\t\t\t\t\tdit._attributeChangeFired = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tchanged && BBModel.prototype.trigger.apply( dit, args );\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse if ( eventName === 'destroy' ) {\n\t\t\tBBModel.prototype.trigger.apply( this, arguments );\n\t\t\tstore.unregister( this );\n\t\t}\n\t\telse {\n\t\t\tBBModel.prototype.trigger.apply( this, arguments );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Initialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\n\t * Invoked in the first call so 'set' (which is made from the Backbone.Model constructor).\n\t */\n\tinitializeRelations: function( options ) {\n\t\tthis.acquire(); // Setting up relations often also involve calls to 'set', and we only want to enter this function once\n\t\tthis._relations = {};\n\n\t\t_.each( this.relations || [], _.bind(function( rel ) {\n\t\t\tstore.initializeRelation( this, rel, options );\n\t\t}, this ));\n\n\t\tthis._isInitialized = true;\n\t\tthis.release();\n\t\tthis.processQueue();\n\t},\n\n\t/**\n\t * When new values are set, notify this model's relations (also if options.silent is set).\n\t * (called from `set`; Relation.setRelated locks this model before calling 'set' on it to prevent loops)\n\t * @param {Object} [changedAttrs]\n\t * @param {Object} [options]\n\t */\n\tupdateRelations: function( changedAttrs, options ) {\n\t\tif ( this._isInitialized && !this.isLocked() ) {\n\t\t\t_.each( this._relations, _.bind(function( rel ) {\n\t\t\t\tif ( !changedAttrs || ( rel.keySource in changedAttrs || rel.key in changedAttrs ) ) {\n\t\t\t\t\t// Fetch data in `rel.keySource` if data got set in there, or `rel.key` otherwise\n\t\t\t\t\tvar value = this.attributes[ rel.keySource ] || this.attributes[ rel.key ],\n\t\t\t\t\t\tattr = changedAttrs && ( changedAttrs[ rel.keySource ] || changedAttrs[ rel.key ] );\n\n\t\t\t\t\t// Update a relation if its value differs from this model's attributes, or it's been explicitly nullified.\n\t\t\t\t\t// Which can also happen before the originally intended related model has been found (`val` is null).\n\t\t\t\t\tif ( rel.related !== value || ( value === null && attr === null ) ) {\n\t\t\t\t\t\tthis.trigger( 'relational:change:' + rel.key, this, value, options || {} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.\n\t\t\t\tif ( rel.keySource !== rel.key ) {\n\t\t\t\t\tdelete this.attributes[ rel.keySource ];\n\t\t\t\t}\n\t\t\t}, this ));\n\t\t}\n\t},\n\n\t/**\n\t * Either add to the queue (if we're not initialized yet), or execute right away.\n\t */\n\tqueue: function( func ) {\n\t\tthis._queue.add( func );\n\t},\n\n\t/**\n\t * Process _queue\n\t */\n\tprocessQueue: function() {\n\t\tif ( this._isInitialized && !this._deferProcessing && this._queue.isBlocked() ) {\n\t\t\tthis._queue.unblock();\n\t\t}\n\t},\n\n\t/**\n\t * Get a specific relation.\n\t * @param {string} attr The relation key to look for.\n\t * @return {Backbone.Relation} An instance of 'Backbone.Relation', if a relation was found for 'attr', or null.\n\t */\n\tgetRelation: function( attr ) {\n\t\treturn this._relations[ attr ];\n\t},\n\n\t/**\n\t * Get all of the created relations.\n\t * @return {Backbone.Relation[]}\n\t */\n\tgetRelations: function() {\n\t\treturn _.values( this._relations );\n\t},\n\n\n\t/**\n\t * Get a list of ids that will be fetched on a call to `getAsync`.\n\t * @param {string|Backbone.Relation} attr The relation key to fetch models for.\n\t * @param [refresh=false] Add ids for models that are already in the relation, refreshing them?\n\t * @return {Array} An array of ids that need to be fetched.\n\t */\n\tgetIdsToFetch: function( attr, refresh ) {\n\t\tvar rel = attr instanceof Relation ? attr : this.getRelation( attr ),\n\t\t\tids = rel ? ( rel.keyIds && rel.keyIds.slice( 0 ) ) || ( ( rel.keyId || rel.keyId === 0 ) ? [ rel.keyId ] : [] ) : [];\n\n\t\t// On `refresh`, add the ids for current models in the relation to `idsToFetch`\n\t\tif ( refresh ) {\n\t\t\tvar models = rel.related && ( rel.related.models || [ rel.related ] );\n\t\t\t_.each( models, function( model ) {\n\t\t\t\tif ( model.id || model.id === 0 ) {\n\t\t\t\t\tids.push( model.id );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn ids;\n\t},\n\n\t/**\n\t * Get related objects. Returns a single promise, which can either resolve immediately (if the related model[s])\n\t * are already present locally, or after fetching the contents of the requested attribute.\n\t * @param {string} attr The relation key to fetch models for.\n\t * @param {Object} [options] Options for 'Backbone.Model.fetch' and 'Backbone.sync'.\n\t * @param {Boolean} [options.refresh=false] Fetch existing models from the server as well (in order to update them).\n\t * @return {jQuery.Deferred} A jQuery promise object. When resolved, its `done` callback will be called with\n\t *  contents of `attr`.\n\t */\n\tgetAsync: function( attr, options ) {\n\t\t// Set default `options` for fetch\n\t\toptions = _.extend( { add: true, remove: false, refresh: false }, options );\n\n\t\tvar dit = this,\n\t\t\trequests = [],\n\t\t\trel = this.getRelation( attr ),\n\t\t\tidsToFetch = rel && this.getIdsToFetch( rel, options.refresh ),\n\t\t\tcoll = rel.related instanceof Collection ? rel.related : rel.relatedCollection;\n\n\t\tif ( idsToFetch && idsToFetch.length ) {\n\t\t\tvar models = [],\n\t\t\t\tcreatedModels = [],\n\t\t\t\tsetUrl,\n\t\t\t\tcreateModels = function() {\n\t\t\t\t\t// Find (or create) a model for each one that is to be fetched\n\t\t\t\t\tmodels = _.map( idsToFetch, _.bind(function( id ) {\n\t\t\t\t\t\tvar model = rel.relatedModel.findModel( id );\n\n\t\t\t\t\t\tif ( !model ) {\n\t\t\t\t\t\t\tvar attrs = {};\n\t\t\t\t\t\t\tattrs[ rel.relatedModel.prototype.idAttribute ] = id;\n\t\t\t\t\t\t\tmodel = rel.relatedModel.findOrCreate( attrs, options );\n\t\t\t\t\t\t\tcreatedModels.push( model );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn model;\n\t\t\t\t\t}, this ));\n\t\t\t\t};\n\n\t\t\t// Try if the 'collection' can provide a url to fetch a set of models in one request.\n\t\t\t// This assumes that when 'Collection.url' is a function, it can handle building of set urls.\n\t\t\t// To make sure it can, test if the url we got by supplying a list of models to fetch is different from\n\t\t\t// the one supplied for the default fetch action (without args to 'url').\n\t\t\tif ( coll instanceof Collection && _.isFunction( coll.url ) ) {\n\t\t\t\tvar defaultUrl = coll.url();\n\t\t\t\tsetUrl = coll.url( idsToFetch );\n\n\t\t\t\tif ( setUrl === defaultUrl ) {\n\t\t\t\t\tcreateModels();\n\t\t\t\t\tsetUrl = coll.url( models );\n\n\t\t\t\t\tif ( setUrl === defaultUrl ) {\n\t\t\t\t\t\tsetUrl = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( setUrl ) {\n\t\t\t\t// Do a single request to fetch all models\n\t\t\t\tlet opts = _.defaults(\n\t\t\t\t\t{\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\t_.each( createdModels, function( model ) {\n\t\t\t\t\t\t\t\tmodel.trigger( 'destroy', model, model.collection, options );\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\toptions.error && options.error.apply( models, arguments );\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: setUrl\n\t\t\t\t\t},\n\t\t\t\t\toptions\n\t\t\t\t);\n\n\t\t\t\trequests = [ coll.fetch( opts ) ];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Make a request per model to fetch\n\t\t\t\tif  ( !models.length ) {\n\t\t\t\t\tcreateModels();\n\t\t\t\t}\n\n\t\t\t\trequests = _.map( models, _.bind(function( model ) {\n\t\t\t\t\tlet opts = _.defaults(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\t\tif ( _.includes( createdModels, model ) ) {\n\t\t\t\t\t\t\t\t\tmodel.trigger( 'destroy', model, model.collection, options );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toptions.error && options.error.apply( models, arguments );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn model.fetch( opts );\n\t\t\t\t}, this ));\n\t\t\t}\n\t\t}\n\n\t\treturn this.deferArray(requests).then(\n\t\t\tfunction() {\n\t\t\t\treturn BBModel.prototype.get.call( dit, attr );\n\t\t\t}\n\t\t);\n\t},\n\n\tdeferArray: function(deferArray) {\n\t\treturn $.when.apply(null, deferArray);\n\t},\n\n\tset: function( key, value, options ) {\n\t\teventQueue.block();\n\n\t\t// Duplicate backbone's behavior to allow separate key/value parameters, instead of a single 'attributes' object\n\t\tvar attributes,\n\t\t\tresult;\n\n\t\tif ( _.isObject( key ) || key == null ) {\n\t\t\tattributes = key;\n\t\t\toptions = value;\n\t\t}\n\t\telse {\n\t\t\tattributes = {};\n\t\t\tattributes[ key ] = value;\n\t\t}\n\n\t\ttry {\n\t\t\tvar id = this.id,\n\t\t\t\tnewId = attributes && this.idAttribute in attributes && attributes[ this.idAttribute ];\n\n\t\t\t// Check if we're not setting a duplicate id before actually calling `set`.\n\t\t\tstore.checkId( this, newId );\n\n\t\t\tresult = BBModel.prototype.set.apply( this, arguments );\n\n\t\t\t// Ideal place to set up relations, if this is the first time we're here for this model\n\t\t\tif ( !this._isInitialized && !this.isLocked() ) {\n\t\t\t\tthis.constructor.initializeModelHierarchy();\n\n\t\t\t\t// Only register models that have an id. A model will be registered when/if it gets an id later on.\n\t\t\t\tif ( newId || newId === 0 ) {\n\t\t\t\t\tstore.register( this );\n\t\t\t\t}\n\n\t\t\t\tthis.initializeRelations( options );\n\t\t\t}\n\t\t\t// The store should know about an `id` update asap\n\t\t\telse if ( newId && newId !== id ) {\n\t\t\t\tstore.update( this );\n\t\t\t}\n\n\t\t\tif ( attributes ) {\n\t\t\t\tthis.updateRelations( attributes, options );\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\t// Try to run the global queue holding external events\n\t\t\teventQueue.unblock();\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tclone: function() {\n\t\tvar attributes = _.clone( this.attributes );\n\t\tif ( !_.isUndefined( attributes[ this.idAttribute ] ) ) {\n\t\t\tattributes[ this.idAttribute ] = null;\n\t\t}\n\n\t\t_.each( this.getRelations(), function( rel ) {\n\t\t\tdelete attributes[ rel.key ];\n\t\t});\n\n\t\treturn new this.constructor( attributes );\n\t},\n\n\t/**\n\t * Convert relations to JSON, omits them when required\n\t */\n\ttoJSON: function( options ) {\n\t\t// If this Model has already been fully serialized in this branch once, return to avoid loops\n\t\tif ( this.isLocked() ) {\n\t\t\treturn this.id;\n\t\t}\n\n\t\tthis.acquire();\n\t\tvar json = BBModel.prototype.toJSON.call( this, options );\n\n\t\tif ( this.constructor._superModel && !( this.constructor._subModelTypeAttribute in json ) ) {\n\t\t\tjson[ this.constructor._subModelTypeAttribute ] = this.constructor._subModelTypeValue;\n\t\t}\n\n\t\t_.each( this._relations, function( rel ) {\n\t\t\tvar related = json[ rel.key ],\n\t\t\t\tincludeInJSON = rel.options.includeInJSON,\n\t\t\t\tvalue = null;\n\n\t\t\tif ( includeInJSON === true ) {\n\t\t\t\tif ( related && _.isFunction( related.toJSON ) ) {\n\t\t\t\t\tvalue = related.toJSON( options );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( _.isString( includeInJSON ) ) {\n\t\t\t\tif ( related instanceof Collection ) {\n\t\t\t\t\tvalue = related.map( includeInJSON );\n\t\t\t\t}\n\t\t\t\telse if ( related instanceof BBModel ) {\n\t\t\t\t\tvalue = related.get( includeInJSON );\n\t\t\t\t}\n\n\t\t\t\t// Add ids for 'unfound' models if includeInJSON is equal to (only) the relatedModel's `idAttribute`\n\t\t\t\tif ( includeInJSON === rel.relatedModel.prototype.idAttribute ) {\n\t\t\t\t\tif ( rel instanceof relationTypeStore.find( 'HasMany' ) ) {\n\t\t\t\t\t\tvalue = value.concat( rel.keyIds );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( rel instanceof relationTypeStore.find( 'HasOne' ) ) {\n\t\t\t\t\t\tvalue = value || rel.keyId;\n\n\t\t\t\t\t\tif ( !value && !_.isObject( rel.keyContents ) ) {\n\t\t\t\t\t\t\tvalue = rel.keyContents || null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( _.isArray( includeInJSON ) ) {\n\t\t\t\tif ( related instanceof Collection ) {\n\t\t\t\t\tvalue = [];\n\t\t\t\t\trelated.each( function( model ) {\n\t\t\t\t\t\tvar curJson = {};\n\t\t\t\t\t\t_.each( includeInJSON, function( key ) {\n\t\t\t\t\t\t\tcurJson[ key ] = model.get( key );\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvalue.push( curJson );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if ( related instanceof BBModel ) {\n\t\t\t\t\tvalue = {};\n\t\t\t\t\t_.each( includeInJSON, function( key ) {\n\t\t\t\t\t\tvalue[ key ] = related.get( key );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete json[ rel.key ];\n\t\t\t}\n\n\t\t\t// In case of `wait: true`, Backbone will simply push whatever's passed into `save` into attributes.\n\t\t\t// We'll want to get this information into the JSON, even if it doesn't conform to our normal\n\t\t\t// expectations of what's contained in it (no model/collection for a relation, etc).\n\t\t\tif ( value === null && options && options.wait ) {\n\t\t\t\tvalue = related;\n\t\t\t}\n\n\t\t\tif ( includeInJSON ) {\n\t\t\t\tjson[ rel.keyDestination ] = value;\n\t\t\t}\n\n\t\t\tif ( rel.keyDestination !== rel.key ) {\n\t\t\t\tdelete json[ rel.key ];\n\t\t\t}\n\t\t});\n\n\t\tthis.release();\n\t\treturn json;\n\t}\n},\n{\n\t/**\n\t *\n\t * @param superModel\n\t * @returns {Backbone.Relational.Model.constructor}\n\t */\n\tsetup: function( superModel ) {\n\t\t// We don't want to share a relations array with a parent, as this will cause problems with reverse\n\t\t// relations. Since `relations` may also be a property or function, only use slice if we have an array.\n\t\tthis.prototype.relations = ( this.prototype.relations || [] ).slice( 0 );\n\n\t\tthis._subModels = {};\n\t\tthis._superModel = null;\n\n\t\t// If this model has 'subModelTypes' itself, remember them in the store\n\t\tif ( this.prototype.hasOwnProperty( 'subModelTypes' ) ) {\n\t\t\tstore.addSubModels( this.prototype.subModelTypes, this );\n\t\t}\n\t\t// The 'subModelTypes' property should not be inherited, so reset it.\n\t\telse {\n\t\t\tthis.prototype.subModelTypes = null;\n\t\t}\n\n\t\t// Initialize all reverseRelations that belong to this new model.\n\t\t_.each( this.prototype.relations || [], _.bind(function( rel ) {\n\t\t\tif ( !rel.model ) {\n\t\t\t\trel.model = this;\n\t\t\t}\n\n\t\t\tif ( rel.reverseRelation && rel.model === this ) {\n\t\t\t\tvar preInitialize = true;\n\t\t\t\tif ( _.isString( rel.relatedModel ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The related model might not be defined for two reasons\n\t\t\t\t\t *  1. it is related to itself\n\t\t\t\t\t *  2. it never gets defined, e.g. a typo\n\t\t\t\t\t *  3. the model hasn't been defined yet, but will be later\n\t\t\t\t\t * In neither of these cases do we need to pre-initialize reverse relations.\n\t\t\t\t\t * However, for 3. (which is, to us, indistinguishable from 2.), we do need to attempt\n\t\t\t\t\t * setting up this relation again later, in case the related model is defined later.\n\t\t\t\t\t */\n\t\t\t\t\tvar relatedModel = store.getObjectByName( rel.relatedModel );\n\t\t\t\t\tpreInitialize = relatedModel && ( relatedModel.prototype instanceof this );\n\t\t\t\t}\n\n\t\t\t\tif ( preInitialize ) {\n\t\t\t\t\tstore.initializeRelation( null, rel );\n\t\t\t\t}\n\t\t\t\telse if ( _.isString( rel.relatedModel ) ) {\n\t\t\t\t\tstore.addOrphanRelation( rel );\n\t\t\t\t}\n\t\t\t}\n\t\t}, this ));\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Create a 'Backbone.Model' instance based on 'attributes'.\n\t * @param {Object} attributes\n\t * @param {Object} [options]\n\t * @return {Backbone.Model}\n\t */\n\tbuild: function( attributes, options ) {\n\t\t// 'build' is a possible entrypoint; it's possible no model hierarchy has been determined yet.\n\t\tthis.initializeModelHierarchy();\n\n\t\t// Determine what type of (sub)model should be built if applicable.\n\t\tvar model = this._findSubModelType( this, attributes ) || this;\n\n\t\treturn new model( attributes, options );\n\t},\n\n\t/**\n\t * Determines what type of (sub)model should be built if applicable.\n\t * Looks up the proper subModelType in 'this._subModels', recursing into\n\t * types until a match is found.  Returns the applicable 'Backbone.Model'\n\t * or null if no match is found.\n\t * @param {Backbone.Model} type\n\t * @param {Object} attributes\n\t * @return {Backbone.Model}\n\t */\n\t_findSubModelType: function( type, attributes ) {\n\t\tif ( type._subModels && type.prototype.subModelTypeAttribute in attributes ) {\n\t\t\tvar subModelTypeAttribute = attributes[ type.prototype.subModelTypeAttribute ];\n\t\t\tvar subModelType = type._subModels[ subModelTypeAttribute ];\n\t\t\tif ( subModelType ) {\n\t\t\t\treturn subModelType;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Recurse into subModelTypes to find a match\n\t\t\t\tfor ( subModelTypeAttribute in type._subModels ) {\n\t\t\t\t\tsubModelType = this._findSubModelType( type._subModels[ subModelTypeAttribute ], attributes );\n\t\t\t\t\tif ( subModelType ) {\n\t\t\t\t\t\treturn subModelType;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\t/**\n\t *\n\t */\n\tinitializeModelHierarchy: function() {\n\t\t// Inherit any relations that have been defined in the parent model.\n\t\tthis.inheritRelations();\n\n\t\t// If we came here through 'build' for a model that has 'subModelTypes' then try to initialize the ones that\n\t\t// haven't been resolved yet.\n\t\tif ( this.prototype.subModelTypes ) {\n\t\t\tvar resolvedSubModels = _.keys( this._subModels );\n\t\t\tvar unresolvedSubModels = _.omit( this.prototype.subModelTypes, resolvedSubModels );\n\t\t\t_.each( unresolvedSubModels, function( subModelTypeName ) {\n\t\t\t\tvar subModelType = store.getObjectByName( subModelTypeName );\n\t\t\t\tsubModelType && subModelType.initializeModelHierarchy();\n\t\t\t});\n\t\t}\n\t},\n\n\tinheritRelations: function() {\n\t\t// Bail out if we've been here before.\n\t\tif ( !_.isUndefined( this._superModel ) && !_.isNull( this._superModel ) ) {\n\t\t\treturn;\n\t\t}\n\t\t// Try to initialize the _superModel.\n\t\tstore.setupSuperModel( this );\n\n\t\t// If a superModel has been found, copy relations from the _superModel if they haven't been inherited automatically\n\t\t// (due to a redefinition of 'relations').\n\t\tif ( this._superModel ) {\n\t\t\t// The _superModel needs a chance to initialize its own inherited relations before we attempt to inherit relations\n\t\t\t// from the _superModel. You don't want to call 'initializeModelHierarchy' because that could cause sub-models of\n\t\t\t// this class to inherit their relations before this class has had chance to inherit it's relations.\n\t\t\tthis._superModel.inheritRelations();\n\t\t\tif ( this._superModel.prototype.relations ) {\n\t\t\t\t// Find relations that exist on the '_superModel', but not yet on this model.\n\t\t\t\tvar inheritedRelations = _.filter( this._superModel.prototype.relations || [], _.bind(function( superRel ) {\n\t\t\t\t\treturn !_.some( this.prototype.relations || [], _.bind(function( rel ) {\n\t\t\t\t\t\treturn superRel.relatedModel === rel.relatedModel && superRel.key === rel.key;\n\t\t\t\t\t}, this ));\n\t\t\t\t}, this ));\n\n\t\t\t\tthis.prototype.relations = inheritedRelations.concat( this.prototype.relations );\n\t\t\t}\n\t\t}\n\t\t// Otherwise, make sure we don't get here again for this type by making '_superModel' false so we fail the\n\t\t// isUndefined/isNull check next time.\n\t\telse {\n\t\t\tthis._superModel = false;\n\t\t}\n\t},\n\n\t/**\n\t * Find an instance of `this` type in 'Backbone.store'.\n\t * A new model is created if no matching model is found, `attributes` is an object, and `options.create` is true.\n\t * - If `attributes` is a string or a number, `findOrCreate` will query the `store` and return a model if found.\n\t * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.\n\t * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.create=true]\n\t * @param {Boolean} [options.merge=true]\n\t * @param {Boolean} [options.parse=false]\n\t * @return {Backbone.Relational.Model}\n\t */\n\tfindOrCreate: function( attributes, options ) {\n\t\toptions || ( options = {} );\n\t\tvar parsedAttributes = ( _.isObject( attributes ) && options.parse && this.prototype.parse ) ?\n\t\t\tthis.prototype.parse( _.clone( attributes ), options ) : attributes;\n\n\t\t// If specified, use a custom `find` function to match up existing models to the given attributes.\n\t\t// Otherwise, try to find an instance of 'this' model type in the store\n\t\tvar model = this.findModel( parsedAttributes );\n\n\t\t// If we found an instance, update it with the data in 'item' (unless 'options.merge' is false).\n\t\t// If not, create an instance (unless 'options.create' is false).\n\t\tif ( _.isObject( attributes ) ) {\n\t\t\tif ( model && options.merge !== false ) {\n\t\t\t\t// Make sure `options.collection` and `options.url` doesn't cascade to nested models\n\t\t\t\tdelete options.collection;\n\t\t\t\tdelete options.url;\n\n\t\t\t\tmodel.set( parsedAttributes, options );\n\t\t\t}\n\t\t\telse if ( !model && options.create !== false ) {\n\t\t\t\tmodel = this.build( parsedAttributes, _.defaults( { parse: false }, options ) );\n\t\t\t}\n\t\t}\n\n\t\treturn model;\n\t},\n\n\t/**\n\t * Find an instance of `this` type in 'Backbone.store'.\n\t * - If `attributes` is a string or a number, `find` will query the `store` and return a model if found.\n\t * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.\n\t * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.merge=true]\n\t * @param {Boolean} [options.parse=false]\n\t * @return {Backbone.Relational.Model}\n\t */\n\tfind: function( attributes, options ) {\n\t\toptions || ( options = {} );\n\t\toptions.create = false;\n\t\treturn this.findOrCreate( attributes, options );\n\t},\n\n\t/**\n\t * A hook to override the matching when updating (or creating) a model.\n\t * The default implementation is to look up the model by id in the store.\n\t * @param {Object} attributes\n\t * @returns {Backbone.Relational.Model}\n\t */\n\tfindModel: function( attributes ) {\n\t\treturn store.find( this, attributes );\n\t},\n\t// Override .extend() to automatically call .setup()\n\textend: function( protoProps, classProps ) {\n\t\tvar child = BBModel.extend.apply( this, arguments );\n\n\t\tchild.setup( this );\n\n\t\treturn child;\n\t}\n});\n","import Backbone from 'backbone';\nimport { Collection as BBCollection, Model as BBModel } from 'backbone';\nimport _ from 'underscore';\nimport Semaphore from './utils/semaphore';\nimport BlockingQueue from './utils/blocking-queue';\nimport eventQueue from './event-queue';\nimport BObject from './utils/object';\nimport config from './config';\nimport Collection from './collection';\nimport relationTypeStore from './relation-type-store';\nimport Relation from './relation';\nimport HasOne from './relation.has-one';\nimport HasMany from './relation.has-many';\nimport Store from './utils/store';\nimport store from './store';\nimport Model from './model';\n\nconst module = config;\n\nmodule.Collection = Collection;\nmodule.Semaphore = Semaphore;\nmodule.BlockingQueue = BlockingQueue;\nmodule.eventQueue = eventQueue;\nmodule.relationTypeStore = relationTypeStore;\n\nmodule.Store = Store;\nmodule.store = store;\n\nmodule.Relation = Relation;\nmodule.HasOne = HasOne;\nmodule.HasMany = HasMany;\n\nrelationTypeStore.registerType( 'HasOne', module.HasOne );\nrelationTypeStore.registerType( 'HasMany', module.HasMany );\n\nmodule.Model = Model;\n\nexport default module;\n"],"names":["_permitsAvailable","_permitsUsed","Error","amount","BlockingQueue","_queue","_","extend","prototype","Semaphore","func","isBlocked","push","queue","length","shift","acquire","release","process","isLocked","Model","Backbone","Events","extendableObject","args","initialize","call","BBCollection","attrs","options","model","BBModel","collection","clone","findOrCreate","validationError","trigger","models","parse","singular","isArray","newModels","toAdd","i","_prepareModel","get","cid","id","_byId","result","set","defaults","merge","eventName","dit","arguments","isObject","toArray","add","apply","sort","reset","toRemove","each","bind","_removeModels","BObject","types","name","Type","RelationTypeStore","_collections","_reverseRelations","_orphanRelations","_subModels","_modelScopes","window","relation","type","isString","relationTypeStore","find","getObjectByName","relationType","config","showWarnings","console","warn","scope","without","subModelTypes","superModelType","modelType","subModelDef","filter","subModels","subModelTypeName","typeValue","subModelType","_superModel","_subModelTypeValue","_subModelTypeAttribute","subModelTypeAttribute","exists","some","rel","every","val","key","_addRelation","retroFitRelation","slice","relatedModel","initializeRelation","relations","subModel","RelationType","coll","getCollection","create","constructor","rootModel","item","_createCollection","parts","split","reduce","memo","undefined","Collection","isNumber","idAttribute","resolveIdForItem","obj","modelColl","duplicate","includes","register","_onModelEvent","stopListening","invoke","getRelations","remove","unregister","Store","instance","opts","reverseRelation","store","keySource","keyDestination","isUndefined","checkPreconditions","isAutoRelation","addReverseRelation","contentKey","setKeyContents","relatedCollection","attributes","_relations","autoFetch","getAsync","listenTo","destroy","tryAddRelated","removeRelated","k","m","rm","keys","existing","related","reverseRelations","j","_isReverseRelation","setRelated","_prepareCollection","getReverseRelations","Relation","onChange","findRelated","addRelated","keyContents","createModels","keyId","attr","changed","__related","oldRelated","silent","collectionType","isFunction","collectionOptions","collectionKey","handleAddition","handleRemoval","handleReset","keyIds","difference","map","itemId","eventQueue","_deferProcessing","processQueue","off","on","defer","processOrphanRelations","block","unblock","indexOf","hasChanged","_attributeChangeFired","getRelation","_isInitialized","changedAttrs","value","values","refresh","ids","requests","idsToFetch","getIdsToFetch","createdModels","setUrl","findModel","url","defaultUrl","error","fetch","deferArray","then","$","when","newId","checkId","initializeModelHierarchy","initializeRelations","update","updateRelations","json","toJSON","includeInJSON","concat","curJson","wait","superModel","hasOwnProperty","addSubModels","preInitialize","addOrphanRelation","_findSubModelType","inheritRelations","resolvedSubModels","unresolvedSubModels","omit","isNull","setupSuperModel","inheritedRelations","superRel","parsedAttributes","build","protoProps","classProps","child","setup","module","HasOne","HasMany","registerType"],"mappings":"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"}