{"version":3,"file":"backbone-relational.js","sources":["../src/utils/semaphore.js","../src/utils/blocking-queue.js","../src/event-queue.js","../src/config.js","../src/utils/extend.js","../src/utils/object.js","../src/utils/relation-type-store.js","../src/relation-type-store.js","../src/utils/store.js","../src/store.js","../src/relation.js","../src/model.js","../src/collection.js","../src/relation.has-one.js","../src/relation.has-many.js","../src/backbone-relational.js"],"sourcesContent":["/**\n * Semaphore mixin; can be used as both binary and counting.\n **/\nexport default {\n\t_permitsAvailable: null,\n\t_permitsUsed: 0,\n\n\tacquire() {\n\t\tif (this._permitsAvailable && this._permitsUsed >= this._permitsAvailable) {\n\t\t\tthrow new Error('Max permits acquired');\n\t\t} else {\n\t\t\tthis._permitsUsed++;\n\t\t}\n\t},\n\n\trelease() {\n\t\tif (this._permitsUsed === 0) {\n\t\t\tthrow new Error('All permits released');\n\t\t} else {\n\t\t\tthis._permitsUsed--;\n\t\t}\n\t},\n\n\tisLocked() {\n\t\treturn this._permitsUsed > 0;\n\t},\n\n\tsetAvailablePermits(amount) {\n\t\tif (this._permitsUsed > amount) {\n\t\t\tthrow new Error('Available permits cannot be less than used permits');\n\t\t}\n\t\tthis._permitsAvailable = amount;\n\t}\n};\n","import _ from 'underscore';\nimport Semaphore from './semaphore';\n\n/**\n * A BlockingQueue that accumulates items while blocked (via 'block'),\n * and processes them when unblocked (via 'unblock').\n * Process can also be called manually (via 'process').\n */\nfunction BlockingQueue() {\n\tthis._queue = [];\n};\n\n_.extend(BlockingQueue.prototype, Semaphore, {\n\t_queue: null,\n\n\tadd(func) {\n\t\tif (this.isBlocked()) {\n\t\t\tthis._queue.push(func);\n\t\t} else {\n\t\t\tfunc();\n\t\t}\n\t},\n\n\t// Some of the queued events may trigger other blocking events. By\n\t// copying the queue here it allows queued events to process closer to\n\t// the natural order.\n\t//\n\t// queue events [ 'A', 'B', 'C' ]\n\t// A handler of 'B' triggers 'D' and 'E'\n\t// By copying `this._queue` this executes:\n\t// [ 'A', 'B', 'D', 'E', 'C' ]\n\t// The same order the would have executed if they didn't have to be\n\t// delayed and queued.\n\tprocess() {\n\t\tlet queue = this._queue;\n\t\tthis._queue = [];\n\t\twhile (queue && queue.length) {\n\t\t\tqueue.shift()();\n\t\t}\n\t},\n\n\tblock() {\n\t\tthis.acquire();\n\t},\n\n\tunblock() {\n\t\tthis.release();\n\t\tif (!this.isBlocked()) {\n\t\t\tthis.process();\n\t\t}\n\t},\n\n\tisBlocked() {\n\t\treturn this.isLocked();\n\t}\n});\n\nexport default BlockingQueue;\n","import BlockingQueue from './utils/blocking-queue';\n\n/**\n * Global event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'change:<key>')\n * until the top-level object is fully initialized (see 'Backbone.Relational.Model').\n */\nexport default new BlockingQueue();\n","export default {\n\tshowWarnings: true\n};\n","import { Model } from 'backbone';\n\nexport default Model.extend;\n","import _ from 'underscore';\nimport extend from './extend';\nimport Events from './events';\n\n/**\n * Base object to extend off of. Works similar to how you extend in Backbone\n */\nfunction ExtendableObject(...args) {\n\tthis.initialize.call(this, ...args);\n};\n_.extend(ExtendableObject.prototype, Events);\nExtendableObject.extend = extend;\n\nexport default ExtendableObject;\n","import BObject from './object';\n\nexport default BObject.extend({\n\tinitialize() {\n\t\tthis.types = {};\n\t},\n\tregisterType(name, Type) {\n\t\tthis.types[ name ] = Type;\n\t},\n\tunregisterType(name, Type) {\n\t\tif (name in this.types) {\n\t\t\tdelete this.types[ name ];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\tfind(name) {\n\t\treturn this.types[ name ];\n\t}\n});\n","import RelationTypeStore from './utils/relation-type-store';\n\nexport default new RelationTypeStore();\n","import _ from 'underscore';\nimport { Model as BBModel } from 'backbone';\nimport BObject from './object';\nimport relationTypeStore from '../relation-type-store';\nimport config from '../config';\nimport Collection from '../collection';\n\n/**\n * Backbone.Store keeps track of all created (and destruction of) Backbone.Relational.Model.\n * Handles lookup for relations.\n */\nexport default BObject.extend({\n\tinitialize() {\n\t\tthis._collections = [];\n\t\tthis._reverseRelations = [];\n\t\tthis._orphanRelations = [];\n\t\tthis._subModels = [];\n\t\tthis._modelScopes = [window];\n\t},\n\n\t/**\n\t * Create a new `Relation`.\n\t * @param {Backbone.Relational.Model} [model]\n\t * @param {Object} relation\n\t * @param {Object} [options]\n\t */\n\tinitializeRelation(model, relation, options) {\n\t\tlet { type: Type } = relation;\n\t\tif (_.isString(Type)) {\n\t\t\tType = relationTypeStore.find(Type) || this.getObjectByName(Type);\n\t\t}\n\n\t\tif (_.isObject(Type)) {\n\t\t\tlet relationType = new Type(model, relation, options); // Also pushes the new Relation into `model._relations`\n\t\t} else if (config.showWarnings && console) {\n\t\t\tconsole.warn('Relation=%o; missing or invalid relation type!', relation);\n\t\t}\n\t},\n\n\t/**\n\t * Add a scope for `getObjectByName` to look for model types by name.\n\t * @param {Object} scope\n\t */\n\taddModelScope(scope) {\n\t\tthis._modelScopes.push(scope);\n\t},\n\n\t/**\n\t * Remove a scope.\n\t * @param {Object} scope\n\t */\n\tremoveModelScope(scope) {\n\t\tthis._modelScopes = _.without(this._modelScopes, scope);\n\t},\n\n\t/**\n\t * Add a set of subModelTypes to the store, that can be used to resolve the '_superModel'\n\t * for a model later in 'setupSuperModel'.\n\t *\n\t * @param {Backbone.Relational.Model} subModelTypes\n\t * @param {Backbone.Relational.Model} superModelType\n\t */\n\taddSubModels(subModelTypes, superModelType) {\n\t\tthis._subModels.push({\n\t\t\tsuperModelType,\n\t\t\tsubModels: subModelTypes\n\t\t});\n\t},\n\n\t/**\n\t * Check if the given modelType is registered as another model's subModel. If so, add it to the super model's\n\t * '_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.\n\t *\n\t * @param {Backbone.Relational.Model} modelType\n\t */\n\tsetupSuperModel(modelType) {\n\t\t_.find(this._subModels, (subModelDef) => {\n\t\t\treturn _.filter(subModelDef.subModels || [], (subModelTypeName, typeValue) => {\n\t\t\t\tlet subModelType = this.getObjectByName(subModelTypeName);\n\n\t\t\t\tif (modelType === subModelType) {\n\t\t\t\t\t// Set 'modelType' as a child of the found superModel\n\t\t\t\t\tsubModelDef.superModelType._subModels[ typeValue ] = modelType;\n\n\t\t\t\t\t// Set '_superModel', '_subModelTypeValue', and '_subModelTypeAttribute' on 'modelType'.\n\t\t\t\t\tmodelType._superModel = subModelDef.superModelType;\n\t\t\t\t\tmodelType._subModelTypeValue = typeValue;\n\t\t\t\t\tmodelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}).length;\n\t\t});\n\t},\n\n\t/**\n\t * Add a reverse relation. Is added to the 'relations' property on model's prototype, and to\n\t * existing instances of 'model' in the store as well.\n\t * @param {Object} relation\n\t * @param {Backbone.Relational.Model} relation.model\n\t * @param {String} relation.type\n\t * @param {String} relation.key\n\t * @param {String|Object} relation.relatedModel\n\t */\n\taddReverseRelation(relation) {\n\t\tlet exists = _.any(this._reverseRelations, function(rel) {\n\t\t\treturn _.all(relation || [], function(val, key) {\n\t\t\t\treturn val === rel[ key ];\n\t\t\t});\n\t\t});\n\n\t\tif (!exists && relation.model && relation.type) {\n\t\t\tthis._reverseRelations.push(relation);\n\t\t\tthis._addRelation(relation.model, relation);\n\t\t\tthis.retroFitRelation(relation);\n\t\t}\n\t},\n\n\t/**\n\t * Deposit a `relation` for which the `relatedModel` can't be resolved at the moment.\n\t *\n\t * @param {Object} relation\n\t */\n\taddOrphanRelation(relation) {\n\t\tlet exists = _.any(this._orphanRelations, function(rel) {\n\t\t\treturn _.all(relation || [], function(val, key) {\n\t\t\t\treturn val === rel[ key ];\n\t\t\t});\n\t\t});\n\n\t\tif (!exists && relation.model && relation.type) {\n\t\t\tthis._orphanRelations.push(relation);\n\t\t}\n\t},\n\n\t/**\n\t * Try to initialize any `_orphanRelation`s\n\t */\n\tprocessOrphanRelations() {\n\t\t// Make sure to operate on a copy since we're removing while iterating\n\t\t_.each(this._orphanRelations.slice(0), (rel) => {\n\t\t\tlet relatedModel = this.getObjectByName(rel.relatedModel);\n\t\t\tif (relatedModel) {\n\t\t\t\tthis.initializeRelation(null, rel);\n\t\t\t\tthis._orphanRelations = _.without(this._orphanRelations, rel);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t *\n\t * @param {Backbone.Relational.Model.constructor} type\n\t * @param {Object} relation\n\t * @private\n\t */\n\t_addRelation(type, relation) {\n\t\tif (!type.prototype.relations) {\n\t\t\ttype.prototype.relations = [];\n\t\t}\n\t\ttype.prototype.relations.push(relation);\n\n\t\t_.each(type._subModels || [], (subModel) => {\n\t\t\tthis._addRelation(subModel, relation);\n\t\t});\n\t},\n\n\t/**\n\t * Add a 'relation' to all existing instances of 'relation.model' in the store\n\t * @param {Object} relation\n\t */\n\tretroFitRelation(relation) {\n\t\tlet { type: RelationType } = relation;\n\n\t\tlet coll = this.getCollection(relation.model, false);\n\t\tcoll && coll.each(function(model) {\n\t\t\tif (!(model instanceof relation.model)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet relationType = new RelationType(model, relation);\n\t\t}, this);\n\t},\n\n\t/**\n\t * Find the Store's collection for a certain type of model.\n\t * @param {Backbone.Relational.Model} type\n\t * @param {Boolean} [create=true] Should a collection be created if none is found?\n\t * @return {Backbone.Relational.Collection} A collection if found (or applicable for 'model'), or null\n\t */\n\tgetCollection(type, create) {\n\t\tif (type instanceof BBModel) {\n\t\t\ttype = type.constructor;\n\t\t}\n\n\t\tlet rootModel = type;\n\t\twhile (rootModel._superModel) {\n\t\t\trootModel = rootModel._superModel;\n\t\t}\n\n\t\tlet coll = _.find(this._collections, function(item) {\n\t\t\treturn item.model === rootModel;\n\t\t});\n\n\t\tif (!coll && create !== false) {\n\t\t\tcoll = this._createCollection(rootModel);\n\t\t}\n\n\t\treturn coll;\n\t},\n\n\t/**\n\t * Find a model type on one of the modelScopes by name. Names are split on dots.\n\t * @param {String} name\n\t * @return {Object}\n\t */\n\tgetObjectByName(name) {\n\t\tlet parts = name.split('.');\n\t\tlet type = null;\n\n\t\t_.find(this._modelScopes, function(scope) {\n\t\t\ttype = _.reduce(parts || [], function(memo, val) {\n\t\t\t\treturn memo ? memo[ val ] : undefined;\n\t\t\t}, scope);\n\n\t\t\tif (type && type !== scope) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}, this);\n\n\t\treturn type;\n\t},\n\n\t_createCollection(type) {\n\t\t// If 'type' is an instance, take its constructor\n\t\tif (!_.isObject(type)) {\n\t\t\ttype = type.constructor;\n\t\t}\n\n\t\t// Type should inherit from Backbone.Relational.Model.\n\t\t// if ( type.prototype instanceof Backbone.Relational.Model ) {\n\t\tlet coll = new Collection();\n\t\tcoll.model = type;\n\n\t\tthis._collections.push(coll);\n\t\t// }\n\n\t\treturn coll;\n\t},\n\n\t/**\n\t * Find the attribute that is to be used as the `id` on a given object\n\t * @param type\n\t * @param {String|Number|Object|Backbone.Relational.Model} item\n\t * @return {String|Number}\n\t */\n\tresolveIdForItem(type, item = null) {\n\t\tif (item === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (_.isString(item) || _.isNumber(item)) {\n\t\t\treturn item;\n\t\t}\n\n\t\treturn item.id || item[ type.prototype.idAttribute ] || null;\n\t},\n\n\t/**\n\t * Find a specific model of a certain `type` in the store\n\t * @param type\n\t * @param {String|Number|Object|Backbone.Relational.Model} item\n\t */\n\tfind(type, item) {\n\t\tlet id = this.resolveIdForItem(type, item);\n\t\tlet coll = this.getCollection(type);\n\n\t\t// Because the found object could be of any of the type's superModel\n\t\t// types, only return it if it's actually of the type asked for.\n\t\tif (coll) {\n\t\t\tlet obj = coll.get(id);\n\n\t\t\tif (obj instanceof type) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Add a 'model' to its appropriate collection. Retain the original contents of 'model.collection'.\n\t * @param {Backbone.Relational.Model} model\n\t */\n\tregister(model) {\n\t\tlet coll = this.getCollection(model);\n\n\t\tif (coll) {\n\t\t\tlet modelColl = model.collection;\n\t\t\tcoll.add(model);\n\t\t\tmodel.collection = modelColl;\n\t\t}\n\t},\n\n\t/**\n\t * Check if the given model may use the given `id`\n\t * @param model\n\t * @param [id]\n\t */\n\tcheckId(model, id) {\n\t\tlet coll = this.getCollection(model);\n\t\tlet duplicate = coll && coll.get(id);\n\n\t\tif (duplicate && model !== duplicate) {\n\t\t\tif (config.showWarnings && console) {\n\t\t\t\tconsole.warn('Duplicate id! Old RelationalModel=%o, new RelationalModel=%o', duplicate, model);\n\t\t\t}\n\n\t\t\tthrow new Error('Cannot instantiate more than one Backbone.Relational.Model with the same id per type!');\n\t\t}\n\t},\n\n\t/**\n\t * Explicitly update a model's id in its store collection\n\t * @param {Backbone.Relational.Model} model\n\t */\n\tupdate(model) {\n\t\tlet coll = this.getCollection(model);\n\n\t\t// Register a model if it isn't yet (which happens if it was created without an id).\n\t\tif (!coll.contains(model)) {\n\t\t\tthis.register(model);\n\t\t}\n\n\t\t// This triggers updating the lookup indices kept in a collection\n\t\tcoll._onModelEvent('change:' + model.idAttribute, model, coll);\n\n\t\t// Trigger an event on model so related models (having the model's new id in their keyContents) can add it.\n\t\tmodel.trigger('relational:change:id', model, coll);\n\t},\n\n\t/**\n\t * Unregister from the store: a specific model, a collection, or a model type.\n\t * @param {Backbone.Relational.Model|Backbone.Relational.Model.constructor|Backbone.Relational.Collection} type\n\t */\n\tunregister(type) {\n\t\tlet coll;\n\t\tlet models = _.clone(type.models);\n\t\tif (type.model) {\n\t\t\tcoll = this.getCollection(type.model);\n\t\t} else {\n\t\t\tcoll = this.getCollection(type);\n\t\t\tmodels = _.clone(coll.models);\n\t\t}\n\n\t\tif (type instanceof BBModel) {\n\t\t\tmodels = [type];\n\t\t}\n\n\t\t_.each(models, (model) => {\n\t\t\tthis.stopListening(model);\n\t\t\t_.invoke(model.getRelations(), 'stopListening');\n\t\t});\n\n\t\t// If we've unregistered an entire store collection, reset the collection (which is much faster).\n\t\t// Otherwise, remove each model one by one.\n\t\tif (_.contains(this._collections, type)) {\n\t\t\tcoll.reset([]);\n\t\t} else {\n\t\t\t_.each(models, (model) => {\n\t\t\t\tif (coll.get(model)) {\n\t\t\t\t\tcoll.remove(model);\n\t\t\t\t} else {\n\t\t\t\t\tcoll.trigger('relational:remove', model, coll);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Reset the `store` to it's original state. The `reverseRelations` are kept though, since attempting to\n\t * re-initialize these on models would lead to a large amount of warnings.\n\t */\n\treset() {\n\t\tthis.stopListening();\n\n\t\t// Unregister each collection to remove event listeners\n\t\t_.each(this._collections, (coll) => {\n\t\t\tthis.unregister(coll);\n\t\t});\n\n\t\tthis._collections = [];\n\t\tthis._subModels = [];\n\t\tthis._modelScopes = [window];\n\t}\n});\n","import Store from './utils/store';\n\nexport default new Store();\n","import _ from 'underscore';\nimport Semaphore from './utils/semaphore';\nimport BObject from './utils/object';\nimport relationTypeStore from './relation-type-store';\nimport store from './store';\nimport config from './config';\nimport Model from './model';\n\n/**\n * The main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events\n * are used to regulate addition and removal of models from relations.\n *\n * @param {Backbone.Relational.Model} [instance] Model that this relation is created for. If no model is supplied,\n *      Relation just tries to instantiate it's `reverseRelation` if specified, and bails out after that.\n * @param {Object} options\n * @param {string} options.key\n * @param {Backbone.Relational.Model.constructor} options.relatedModel\n * @param {Boolean|String} [options.includeInJSON=true] Serialize the given attribute for related model(s)' in toJSON, or just their ids.\n * @param {Boolean} [options.createModels=true] Create objects from the contents of keys if the object is not found in Backbone.store.\n * @param {Object} [options.reverseRelation] Specify a bi-directional relation. If provided, Relation will reciprocate\n *    the relation to the 'relatedModel'. Required and optional properties match 'options', except that it also needs\n *    {Backbone.Relation|String} type ('HasOne' or 'HasMany').\n * @param {Object} opts\n */\nexport default BObject.extend(Semaphore).extend({\n\tinstance: null,\n\tkey: null,\n\tkeyContents: null,\n\trelatedModel: null,\n\trelatedCollection: null,\n\treverseRelation: null,\n\trelated: null,\n\n\tconstructor(instance, options, opts) {\n\t\tthis.instance = instance;\n\t\t// Make sure 'options' is sane, and fill with defaults from subclasses and this object's prototype\n\t\toptions = _.isObject(options) ? options : {};\n\t\tthis.reverseRelation = _.defaults(options.reverseRelation || {}, this.options.reverseRelation);\n\t\tthis.options = _.defaults(options, this.options, {\n\t\t\tcreateModels: true,\n\t\t\tincludeInJSON: true,\n\t\t\tisAutoRelation: false,\n\t\t\tautoFetch: false,\n\t\t\tparse: false\n\t\t});\n\n\t\t// TODO: handle this logic else where. it's crazy to have a parent depend on its children!!\n\t\tif (_.isString(this.reverseRelation.type)) {\n\t\t\tthis.reverseRelation.type = relationTypeStore.find(this.reverseRelation.type) || store.getObjectByName(this.reverseRelation.type);\n\t\t}\n\n\t\tthis.key = this.options.key;\n\t\tthis.keySource = this.options.keySource || this.key;\n\t\tthis.keyDestination = this.options.keyDestination || this.keySource || this.key;\n\n\t\tthis.model = this.options.model || this.instance.constructor;\n\n\t\tthis.relatedModel = this.options.relatedModel;\n\n\t\tif (_.isUndefined(this.relatedModel)) {\n\t\t\tthis.relatedModel = this.model;\n\t\t}\n\n\t\tif (_.isFunction(this.relatedModel) && !(this.relatedModel.prototype instanceof Model)) {\n\t\t\tthis.relatedModel = _.result(this, 'relatedModel');\n\t\t}\n\t\tif (_.isString(this.relatedModel)) {\n\t\t\tthis.relatedModel = store.getObjectByName(this.relatedModel);\n\t\t}\n\n\t\tif (!this.checkPreconditions()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add the reverse relation on 'relatedModel' to the store's reverseRelations\n\t\tif (!this.options.isAutoRelation && this.reverseRelation.type && this.reverseRelation.key) {\n\t\t\tstore.addReverseRelation(_.defaults({\n\t\t\t\tisAutoRelation: true,\n\t\t\t\tmodel: this.relatedModel,\n\t\t\t\trelatedModel: this.model,\n\t\t\t\treverseRelation: this.options // current relation is the 'reverseRelation' for its own reverseRelation\n\t\t\t},\n\t\t\t\tthis.reverseRelation // Take further properties from this.reverseRelation (type, key, etc.)\n\t\t\t));\n\t\t}\n\n\t\tif (instance) {\n\t\t\tlet contentKey = this.keySource;\n\t\t\tif (contentKey !== this.key && _.isObject(this.instance.get(this.key))) {\n\t\t\t\tcontentKey = this.key;\n\t\t\t}\n\n\t\t\tthis.setKeyContents(this.instance.get(contentKey));\n\t\t\tthis.relatedCollection = store.getCollection(this.relatedModel);\n\n\t\t\t// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.\n\t\t\tif (this.keySource !== this.key) {\n\t\t\t\tdelete this.instance.attributes[ this.keySource ];\n\t\t\t}\n\n\t\t\t// Add this Relation to instance._relations\n\t\t\tthis.instance._relations[ this.key ] = this;\n\n\t\t\tthis.initialize(opts);\n\n\t\t\tif (this.options.autoFetch) {\n\t\t\t\tthis.instance.getAsync(this.key, _.isObject(this.options.autoFetch) ? this.options.autoFetch : {});\n\t\t\t}\n\n\t\t\t// When 'relatedModel' are created or destroyed, check if it affects this relation.\n\t\t\tthis.listenTo(this.instance, 'destroy', this.destroy)\n\t\t\t\t.listenTo(this.relatedCollection, 'relational:add relational:change:id', this.tryAddRelated)\n\t\t\t\t.listenTo(this.relatedCollection, 'relational:remove', this.removeRelated);\n\t\t}\n\t},\n\n\t/**\n\t * Check several pre-conditions.\n\t * @return {Boolean} True if pre-conditions are satisfied, false if they're not.\n\t */\n\tcheckPreconditions() {\n\t\tlet i = this.instance;\n\t\tlet k = this.key;\n\t\tlet m = this.model;\n\t\tlet rm = this.relatedModel;\n\t\tlet warn = config.showWarnings && typeof console !== 'undefined';\n\n\t\tif (!m || !k || !rm) {\n\t\t\twarn && console.warn('Relation=%o: missing model, key or relatedModel (%o, %o, %o).', this, m, k, rm);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if the type in 'model' inherits from Backbone.Relational.Model\n\t\tif (!(m.prototype instanceof Model)) {\n\t\t\twarn && console.warn('Relation=%o: model does not inherit from Backbone.Relational.Model (%o).', this, i);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if the type in 'relatedModel' inherits from Backbone.Relational.Model\n\t\tif (!(rm.prototype instanceof Model)) {\n\t\t\twarn && console.warn('Relation=%o: relatedModel does not inherit from Backbone.Relational.Model (%o).', this, rm);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if this is not a HasMany, and the reverse relation is HasMany as well\n\t\t// TODO: handle this logic elsewhere!\n\t\tif (this instanceof relationTypeStore.find('HasMany') && this.reverseRelation.type === relationTypeStore.find('HasMany')) {\n\t\t\twarn && console.warn('Relation=%o: relation is a HasMany, and the reverseRelation is HasMany as well.', this);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if we're not attempting to create a relationship on a `key` that's already used.\n\t\tif (i && _.keys(i._relations).length) {\n\t\t\tlet existing = _.find(i._relations, function(rel) {\n\t\t\t\treturn rel.key === k;\n\t\t\t}, this);\n\n\t\t\tif (existing) {\n\t\t\t\twarn && console.warn('Cannot create relation=%o on %o for model=%o: already taken by relation=%o.',\n\t\t\t\t\tthis, k, i, existing);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Set the related model(s) for this relation\n\t * @param {Backbone.Model|Backbone.Relational.Collection} related\n\t */\n\tsetRelated(related) {\n\t\tthis.related = related;\n\t\tthis.instance.attributes[ this.key ] = related;\n\t},\n\n\t/**\n\t * Determine if a relation (on a different RelationalModel) is the reverse\n\t * relation of the current one.\n\t * @param {Backbone.Relation} relation\n\t * @return {Boolean}\n\t */\n\t_isReverseRelation(relation) {\n\t\treturn relation.instance instanceof this.relatedModel && this.reverseRelation.key === relation.key &&\n\t\t\tthis.key === relation.reverseRelation.key;\n\t},\n\n\t/**\n\t * Get the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).\n\t * @param {Backbone.Relational.Model} [model] Get the reverse relations for a specific model.\n\t *    If not specified, 'this.related' is used.\n\t * @return {Backbone.Relation[]}\n\t */\n\tgetReverseRelations(model) {\n\t\tlet reverseRelations = [];\n\t\t// Iterate over 'model', 'this.related.models' (if this.related is a Backbone.Relational.Collection), or wrap 'this.related' in an array.\n\t\tlet models = !_.isUndefined(model) ? [model] : this.related && (this.related.models || [this.related]);\n\t\tlet relations = null;\n\t\tlet relation = null;\n\n\t\tfor (let i = 0; i < (models || []).length; i++) {\n\t\t\trelations = models[ i ].getRelations() || [];\n\n\t\t\tfor (let j = 0; j < relations.length; j++) {\n\t\t\t\trelation = relations[ j ];\n\n\t\t\t\tif (this._isReverseRelation(relation)) {\n\t\t\t\t\treverseRelations.push(relation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn reverseRelations;\n\t},\n\n\t/**\n\t * When `this.instance` is destroyed, cleanup our relations.\n\t * Get reverse relation, call removeRelated on each.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tif (this instanceof relationTypeStore.find('HasOne')) {\n\t\t\tthis.setRelated(null);\n\t\t} else if (this instanceof relationTypeStore.find('HasMany')) {\n\t\t\tthis.setRelated(this._prepareCollection());\n\t\t}\n\n\t\t_.each(this.getReverseRelations(), (relation) => {\n\t\t\trelation.removeRelated(this.instance);\n\t\t});\n\t}\n});\n","import { Model as BBModel } from 'backbone';\nimport _ from 'underscore';\nimport Semaphore from './utils/semaphore';\nimport store from './store';\nimport eventQueue from './event-queue';\nimport BlockingQueue from './utils/blocking-queue';\nimport Relation from './relation';\nimport Collection from './collection';\nimport $ from 'jquery';\nimport relationTypeStore from './relation-type-store';\n\n/**\n * A type of Backbone.Model that also maintains relations to other models and collections.\n * New events when compared to the original:\n *  - 'add:<key>' (model, related collection, options)\n *  - 'remove:<key>' (model, related collection, options)\n *  - 'change:<key>' (model, related model or collection, options)\n */\nexport default BBModel.extend(Semaphore).extend({\n\trelations: null, // Relation descriptions on the prototype\n\t_relations: null, // Relation instances\n\t_isInitialized: false,\n\t_deferProcessing: false,\n\t_queue: null,\n\t_attributeChangeFired: false, // Keeps track of `change` event firing under some conditions (like nested `set`s)\n\n\tsubModelTypeAttribute: 'type',\n\tsubModelTypes: null,\n\n\tconstructor(attributes, options = {}) {\n\t\tconst { collection } = options;\n\t\t// Nasty hack, for cases like 'model.get( <HasMany key> ).add( item )'.\n\t\t// Defer 'processQueue', so that when 'Relation.createModels' is used we trigger 'HasMany'\n\t\t// collection events only after the model is really fully set up.\n\t\t// Example: event for \"p.on( 'add:jobs' )\" -> \"p.get('jobs').add( { company: c.id, person: p.id } )\".\n\t\tif (collection) {\n\t\t\tthis.collection = collection;\n\t\t\t// Prevent `collection` from cascading down to nested models; they shouldn't go into this `if` clause.\n\t\t\tdelete options.collection;\n\n\t\t\tthis._deferProcessing = true;\n\n\t\t\tconst processQueue = (model) => {\n\t\t\t\tif (model !== this) { return; }\n\n\t\t\t\tthis._deferProcessing = false;\n\t\t\t\tthis.processQueue();\n\t\t\t\tcollection.off('relational:add', processQueue);\n\t\t\t};\n\n\t\t\tthis.listenTo(collection, 'relational:add', processQueue);\n\n\t\t\t// So we do process the queue eventually, regardless of whether this model actually gets added to 'options.collection'.\n\t\t\t_.defer(() => {\n\t\t\t\tprocessQueue(this);\n\t\t\t});\n\t\t}\n\n\t\tstore.processOrphanRelations();\n\t\tstore.listenTo(this, 'relational:unregister', store.unregister);\n\n\t\tthis._queue = new BlockingQueue();\n\t\tthis._queue.block();\n\t\teventQueue.block();\n\n\t\ttry {\n\t\t\tBBModel.call(this, attributes, options);\n\t\t} finally {\n\t\t\t// Try to run the global queue holding external events\n\t\t\teventQueue.unblock();\n\t\t}\n\t},\n\n\t/**\n\t * Override 'trigger' to queue 'change' and 'change:*' events\n\t * @param {String} eventName name of event\n\t * @returns {this} this\n\t */\n\ttrigger(eventName) {\n\t\tconst args = _.toArray(arguments);\n\n\t\tif (eventName.length > 5 && eventName.indexOf('change') === 0) {\n\t\t\tif (!eventQueue.isLocked()) {\n\t\t\t\t// If we're not in a more complicated nested scenario, fire the change event right away\n\t\t\t\tBBModel.prototype.trigger.call(this, ...args);\n\t\t\t} else {\n\t\t\t\teventQueue.add(() => {\n\t\t\t\t\t// Determine if the `change` event is still valid, now that all relations are populated\n\t\t\t\t\tlet changed = true;\n\t\t\t\t\tif (eventName === 'change') {\n\t\t\t\t\t\t// `hasChanged` may have gotten reset by nested calls to `set`.\n\t\t\t\t\t\tchanged = this.hasChanged() || this._attributeChangeFired;\n\t\t\t\t\t\tthis._attributeChangeFired = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet attr = eventName.slice(7);\n\t\t\t\t\t\tlet rel = this.getRelation(attr);\n\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\t// If `attr` is a relation, `change:attr` get triggered from `Relation.onChange`.\n\t\t\t\t\t\t\t// These take precedence over `change:attr` events triggered by `Model.set`.\n\t\t\t\t\t\t\t// The relation sets a fourth attribute to `true`. If this attribute is present,\n\t\t\t\t\t\t\t// continue triggering this event; otherwise, it's from `Model.set` and should be stopped.\n\t\t\t\t\t\t\tchanged = (args[ 4 ] === true);\n\n\t\t\t\t\t\t\t// If this event was triggered by a relation, set the right value in `this.changed`\n\t\t\t\t\t\t\t// (a Collection or Model instead of raw data).\n\t\t\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t\t\tthis.changed[ attr ] = args[ 2 ];\n\t\t\t\t\t\t\t} else if (!rel.changed) {\n\t\t\t\t\t\t\t\t// Otherwise, this event is from `Model.set`. If the relation doesn't report a change,\n\t\t\t\t\t\t\t\t// remove attr from `this.changed` so `hasChanged` doesn't take it into account.\n\t\t\t\t\t\t\t\tdelete this.changed[ attr ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (changed) {\n\t\t\t\t\t\t\tthis._attributeChangeFired = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tchanged && BBModel.prototype.trigger.call(this, ...args);\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (eventName === 'destroy') {\n\t\t\tBBModel.prototype.trigger.call(this, ...args);\n\t\t\tstore.unregister(this);\n\t\t} else {\n\t\t\tBBModel.prototype.trigger.call(this, ...args);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Initialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.\n\t * Invoked in the first call so 'set' (which is made from the Backbone.Model constructor).\n\t *\n\t * @param {Object} options Options to pass to relation\n\t */\n\tinitializeRelations(options) {\n\t\tthis.acquire(); // Setting up relations often also involve calls to 'set', and we only want to enter this function once\n\t\tthis._relations = {};\n\n\t\t_.each(this.relations || [], function(rel) {\n\t\t\tstore.initializeRelation(this, rel, options);\n\t\t}, this);\n\n\t\tthis._isInitialized = true;\n\t\tthis.release();\n\t\tthis.processQueue();\n\t},\n\n\t/**\n\t * When new values are set, notify this model's relations (also if options.silent is set).\n\t * (called from `set`; Relation.setRelated locks this model before calling 'set' on it to prevent loops)\n\t *\n\t * @param {Object} [changedAttrs] Object representing changed attributes\n\t * @param {Object} [options] Options object passed along with relational:change event\n\t */\n\tupdateRelations(changedAttrs, options = {}) {\n\t\tif (this._isInitialized && !this.isLocked()) {\n\t\t\t_.each(this._relations, (rel) => {\n\t\t\t\tif (!changedAttrs || (rel.keySource in changedAttrs || rel.key in changedAttrs)) {\n\t\t\t\t\t// Fetch data in `rel.keySource` if data got set in there, or `rel.key` otherwise\n\t\t\t\t\tlet value = this.attributes[ rel.keySource ] || this.attributes[ rel.key ];\n\t\t\t\t\tlet attr = changedAttrs && (changedAttrs[ rel.keySource ] || changedAttrs[ rel.key ]);\n\n\t\t\t\t\t// Update a relation if its value differs from this model's attributes, or it's been explicitly nullified.\n\t\t\t\t\t// Which can also happen before the originally intended related model has been found (`val` is null).\n\t\t\t\t\tif (rel.related !== value || (value === null && attr === null)) {\n\t\t\t\t\t\tthis.trigger('relational:change:' + rel.key, this, value, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.\n\t\t\t\tif (rel.keySource !== rel.key) {\n\t\t\t\t\tdelete this.attributes[ rel.keySource ];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Either add to the queue (if we're not initialized yet), or execute right away.\n\t * @param {Function} [func] Function to defer execution\n\t */\n\tqueue(func) {\n\t\tthis._queue.add(func);\n\t},\n\n\t/**\n\t * Process _queue\n\t */\n\tprocessQueue() {\n\t\tif (this._isInitialized && !this._deferProcessing && this._queue.isBlocked()) {\n\t\t\tthis._queue.unblock();\n\t\t}\n\t},\n\n\t/**\n\t * Get a specific relation.\n\t * @param {string} attr The relation key to look for.\n\t * @return {Backbone.Relation} An instance of 'Backbone.Relation', if a relation was found for 'attr', or null.\n\t */\n\tgetRelation(attr) {\n\t\treturn this._relations[ attr ];\n\t},\n\n\t/**\n\t * Get all of the created relations.\n\t * @return {Backbone.Relation[]} Array of relationships\n\t */\n\tgetRelations() {\n\t\treturn _.values(this._relations);\n\t},\n\n\t/**\n\t * Get a list of ids that will be fetched on a call to `getAsync`.\n\t * @param {string|Backbone.Relation} attr The relation key to fetch models for.\n\t * @param {Boolean} [refresh=false] Add ids for models that are already in the relation, refreshing them?\n\t * @return {Array} An array of ids that need to be fetched.\n\t */\n\tgetIdsToFetch(attr, refresh = false) {\n\t\tlet rel = attr instanceof Relation ? attr : this.getRelation(attr);\n\t\tlet ids = rel ? (rel.keyIds && rel.keyIds.slice(0)) || ((rel.keyId || rel.keyId === 0) ? [rel.keyId] : []) : [];\n\n\t\t// On `refresh`, add the ids for current models in the relation to `idsToFetch`\n\t\tif (refresh) {\n\t\t\tlet models = rel.related && (rel.related.models || [rel.related]);\n\t\t\t_.each(models, function(model) {\n\t\t\t\tif (model.id || model.id === 0) {\n\t\t\t\t\tids.push(model.id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn ids;\n\t},\n\n\t/**\n\t * Get related objects. Returns a single promise, which can either resolve immediately (if the related model[s])\n\t * are already present locally, or after fetching the contents of the requested attribute.\n\t * @param {string} attr The relation key to fetch models for.\n\t * @param {Object} [options] Options for 'Backbone.Model.fetch' and 'Backbone.sync'.\n\t * @param {Boolean} [options.refresh=false] Fetch existing models from the server as well (in order to update them).\n\t * @return {jQuery.Deferred} A jQuery promise object. When resolved, its `done` callback will be called with\n\t *  contents of `attr`.\n\t */\n\tgetAsync(attr, options) {\n\t\t// Set default `options` for fetch\n\t\toptions = _.extend({ add: true, remove: false, refresh: false }, options);\n\n\t\tlet requests = [];\n\t\tlet rel = this.getRelation(attr);\n\t\tlet idsToFetch = rel && this.getIdsToFetch(rel, options.refresh);\n\t\tlet coll = rel.related instanceof Collection ? rel.related : rel.relatedCollection;\n\n\t\tif (idsToFetch && idsToFetch.length) {\n\t\t\tlet models = [];\n\t\t\tlet createdModels = [];\n\t\t\tlet setUrl;\n\t\t\tfunction createModels() {\n\t\t\t\t// Find (or create) a model for each one that is to be fetched\n\t\t\t\tmodels = _.map(idsToFetch, (id) => {\n\t\t\t\t\tlet model = rel.relatedModel.findModel(id);\n\n\t\t\t\t\tif (!model) {\n\t\t\t\t\t\tlet attrs = {};\n\t\t\t\t\t\tattrs[ rel.relatedModel.prototype.idAttribute ] = id;\n\t\t\t\t\t\tmodel = rel.relatedModel.findOrCreate(attrs, options);\n\t\t\t\t\t\tcreatedModels.push(model);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn model;\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Try if the 'collection' can provide a url to fetch a set of models in one request.\n\t\t\t// This assumes that when 'Collection.url' is a function, it can handle building of set urls.\n\t\t\t// To make sure it can, test if the url we got by supplying a list of models to fetch is different from\n\t\t\t// the one supplied for the default fetch action (without args to 'url').\n\t\t\tif (coll instanceof Collection && _.isFunction(coll.url)) {\n\t\t\t\tlet defaultUrl = coll.url();\n\t\t\t\tsetUrl = coll.url(idsToFetch);\n\n\t\t\t\tif (setUrl === defaultUrl) {\n\t\t\t\t\tcreateModels();\n\t\t\t\t\tsetUrl = coll.url(models);\n\n\t\t\t\t\tif (setUrl === defaultUrl) {\n\t\t\t\t\t\tsetUrl = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (setUrl) {\n\t\t\t\t// Do a single request to fetch all models\n\t\t\t\tlet opts = _.defaults({\n\t\t\t\t\turl: setUrl,\n\t\t\t\t\terror(...args) {\n\t\t\t\t\t\t_.each(createdModels, function(model) {\n\t\t\t\t\t\t\tmodel.trigger('destroy', model, model.collection, options);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (options.error) {\n\t\t\t\t\t\t\toptions.error.call(this, ...args)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, options);\n\n\t\t\t\trequests = [coll.fetch(opts)];\n\t\t\t} else {\n\t\t\t\t// Make a request per model to fetch\n\t\t\t\tif (!models.length) {\n\t\t\t\t\tcreateModels();\n\t\t\t\t}\n\n\t\t\t\trequests = _.map(models, function(model) {\n\t\t\t\t\tlet opts = _.defaults({\n\t\t\t\t\t\terror(...args) {\n\t\t\t\t\t\t\tif (_.contains(createdModels, model)) {\n\t\t\t\t\t\t\t\tmodel.trigger('destroy', model, model.collection, options);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (options.error) {\n\t\t\t\t\t\t\t\toptions.error.call(this, ...args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, options);\n\n\t\t\t\t\treturn model.fetch(opts);\n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\n\t\treturn this.deferArray(requests).then(() => {\n\t\t\treturn BBModel.prototype.get.call(this, attr);\n\t\t});\n\t},\n\n\tdeferArray(deferArray) {\n\t\treturn $.when(...deferArray);\n\t},\n\n\tset(key, value, options) {\n\t\tconst args = _.toArray(arguments);\n\n\t\teventQueue.block();\n\n\t\t// Duplicate backbone's behavior to allow separate key/value parameters, instead of a single 'attributes' object\n\t\tlet attributes;\n\t\tlet result;\n\n\t\tif (_.isObject(key) || key == null) {\n\t\t\tattributes = key;\n\t\t\toptions = value;\n\t\t} else {\n\t\t\tattributes = {};\n\t\t\tattributes[ key ] = value;\n\t\t}\n\n\t\ttry {\n\t\t\tlet id = this.id;\n\t\t\tlet newId = attributes && this.idAttribute in attributes && attributes[ this.idAttribute ];\n\n\t\t\t// Check if we're not setting a duplicate id before actually calling `set`.\n\t\t\tstore.checkId(this, newId);\n\n\t\t\tresult = BBModel.prototype.set.call(this, ...args);\n\n\t\t\t// Ideal place to set up relations, if this is the first time we're here for this model\n\t\t\tif (!this._isInitialized && !this.isLocked()) {\n\t\t\t\tthis.constructor.initializeModelHierarchy();\n\n\t\t\t\t// Only register models that have an id. A model will be registered when/if it gets an id later on.\n\t\t\t\tif (newId || newId === 0) {\n\t\t\t\t\tstore.register(this);\n\t\t\t\t}\n\n\t\t\t\tthis.initializeRelations(options);\n\t\t\t} else if (newId && newId !== id) {\n\t\t\t\t// The store should know about an `id` update asap\n\t\t\t\tstore.update(this);\n\t\t\t}\n\n\t\t\tif (attributes) {\n\t\t\t\tthis.updateRelations(attributes, options);\n\t\t\t}\n\t\t} finally {\n\t\t\t// Try to run the global queue holding external events\n\t\t\teventQueue.unblock();\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tclone() {\n\t\tlet attributes = _.clone(this.attributes);\n\t\tif (!_.isUndefined(attributes[ this.idAttribute ])) {\n\t\t\tattributes[ this.idAttribute ] = null;\n\t\t}\n\n\t\t_.each(this.getRelations(), function(rel) {\n\t\t\tdelete attributes[ rel.key ];\n\t\t});\n\n\t\treturn new this.constructor(attributes);\n\t},\n\n\t/**\n\t * Convert relations to JSON, omits them when required\n\t * @param {Object} [options] Options\n\t */\n\ttoJSON(options) {\n\t\t// If this Model has already been fully serialized in this branch once, return to avoid loops\n\t\tif (this.isLocked()) {\n\t\t\treturn this.id;\n\t\t}\n\n\t\tthis.acquire();\n\t\tlet json = BBModel.prototype.toJSON.call(this, options);\n\n\t\tif (this.constructor._superModel && !(this.constructor._subModelTypeAttribute in json)) {\n\t\t\tjson[ this.constructor._subModelTypeAttribute ] = this.constructor._subModelTypeValue;\n\t\t}\n\n\t\t_.each(this._relations, function(rel) {\n\t\t\tlet related = json[ rel.key ];\n\t\t\tlet includeInJSON = rel.options.includeInJSON;\n\t\t\tlet value = null;\n\n\t\t\tif (includeInJSON === true) {\n\t\t\t\tif (related && _.isFunction(related.toJSON)) {\n\t\t\t\t\tvalue = related.toJSON(options);\n\t\t\t\t}\n\t\t\t} else if (_.isString(includeInJSON)) {\n\t\t\t\tif (related instanceof Collection) {\n\t\t\t\t\tvalue = related.pluck(includeInJSON);\n\t\t\t\t} else if (related instanceof BBModel) {\n\t\t\t\t\tvalue = related.get(includeInJSON);\n\t\t\t\t}\n\n\t\t\t\t// Add ids for 'unfound' models if includeInJSON is equal to (only) the relatedModel's `idAttribute`\n\t\t\t\tif (includeInJSON === rel.relatedModel.prototype.idAttribute) {\n\t\t\t\t\tif (rel instanceof relationTypeStore.find('HasMany')) {\n\t\t\t\t\t\tvalue = value.concat(rel.keyIds);\n\t\t\t\t\t} else if (rel instanceof relationTypeStore.find('HasOne')) {\n\t\t\t\t\t\tvalue = value || rel.keyId;\n\n\t\t\t\t\t\tif (!value && !_.isObject(rel.keyContents)) {\n\t\t\t\t\t\t\tvalue = rel.keyContents || null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_.isArray(includeInJSON)) {\n\t\t\t\tif (related instanceof Collection) {\n\t\t\t\t\tvalue = [];\n\t\t\t\t\trelated.each(function(model) {\n\t\t\t\t\t\tlet curJson = {};\n\t\t\t\t\t\t_.each(includeInJSON, function(key) {\n\t\t\t\t\t\t\tcurJson[ key ] = model.get(key);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvalue.push(curJson);\n\t\t\t\t\t});\n\t\t\t\t} else if (related instanceof BBModel) {\n\t\t\t\t\tvalue = {};\n\t\t\t\t\t_.each(includeInJSON, function(key) {\n\t\t\t\t\t\tvalue[ key ] = related.get(key);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdelete json[ rel.key ];\n\t\t\t}\n\n\t\t\t// In case of `wait: true`, Backbone will simply push whatever's passed into `save` into attributes.\n\t\t\t// We'll want to get this information into the JSON, even if it doesn't conform to our normal\n\t\t\t// expectations of what's contained in it (no model/collection for a relation, etc).\n\t\t\tif (value === null && options && options.wait) {\n\t\t\t\tvalue = related;\n\t\t\t}\n\n\t\t\tif (includeInJSON) {\n\t\t\t\tjson[ rel.keyDestination ] = value;\n\t\t\t}\n\n\t\t\tif (rel.keyDestination !== rel.key) {\n\t\t\t\tdelete json[ rel.key ];\n\t\t\t}\n\t\t});\n\n\t\tthis.release();\n\t\treturn json;\n\t}\n}, {\n\t/**\n\t *\n\t * @param superModel\n\t * @returns {Backbone.Relational.Model.constructor}\n\t */\n\tsetup(superModel) {\n\t\t// We don't want to share a relations array with a parent, as this will cause problems with reverse\n\t\t// relations. Since `relations` may also be a property or function, only use slice if we have an array.\n\t\tthis.prototype.relations = (this.prototype.relations || []).slice(0);\n\n\t\tthis._subModels = {};\n\t\tthis._superModel = null;\n\n\t\t// If this model has 'subModelTypes' itself, remember them in the store\n\t\tif (this.prototype.hasOwnProperty('subModelTypes')) {\n\t\t\tstore.addSubModels(this.prototype.subModelTypes, this);\n\t\t} else {\n\t\t\t// The 'subModelTypes' property should not be inherited, so reset it.\n\t\t\tthis.prototype.subModelTypes = null;\n\t\t}\n\n\t\t// Initialize all reverseRelations that belong to this new model.\n\t\t_.each(this.prototype.relations || [], (rel) => {\n\t\t\tif (!rel.model) {\n\t\t\t\trel.model = this;\n\t\t\t}\n\n\t\t\tif (rel.reverseRelation && rel.model === this) {\n\t\t\t\tlet preInitialize = true;\n\t\t\t\tif (_.isString(rel.relatedModel)) {\n\t\t\t\t/**\n\t\t\t\t * The related model might not be defined for two reasons\n\t\t\t\t *  1. it is related to itself\n\t\t\t\t *  2. it never gets defined, e.g. a typo\n\t\t\t\t *  3. the model hasn't been defined yet, but will be later\n\t\t\t\t * In neither of these cases do we need to pre-initialize reverse relations.\n\t\t\t\t * However, for 3. (which is, to us, indistinguishable from 2.), we do need to attempt\n\t\t\t\t * setting up this relation again later, in case the related model is defined later.\n\t\t\t\t */\n\t\t\t\t\tlet relatedModel = store.getObjectByName(rel.relatedModel);\n\t\t\t\t\tpreInitialize = relatedModel && (relatedModel.prototype instanceof this);\n\t\t\t\t}\n\n\t\t\t\tif (preInitialize) {\n\t\t\t\t\tstore.initializeRelation(null, rel);\n\t\t\t\t} else if (_.isString(rel.relatedModel)) {\n\t\t\t\t\tstore.addOrphanRelation(rel);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Create a 'Backbone.Model' instance based on 'attributes'.\n\t * @param {Object} [attributes] Attributes to set\n\t * @param {Object} [options] Options\n\t * @return {Backbone.Model}\n\t */\n\tbuild(attributes, options) {\n\t\t// 'build' is a possible entrypoint; it's possible no model hierarchy has been determined yet.\n\t\tthis.initializeModelHierarchy();\n\n\t\t// Determine what type of (sub)model should be built if applicable.\n\t\tlet Model = this._findSubModelType(this, attributes) || this;\n\n\t\treturn new Model(attributes, options);\n\t},\n\n\t/**\n\t * Determines what type of (sub)model should be built if applicable.\n\t * Looks up the proper subModelType in 'this._subModels', recursing into\n\t * types until a match is found.  Returns the applicable 'Backbone.Model'\n\t * or null if no match is found.\n\t * @param {Backbone.Model} type\n\t * @param {Object} attributes\n\t * @return {Backbone.Model}\n\t */\n\t_findSubModelType(type, attributes) {\n\t\tif (type._subModels && type.prototype.subModelTypeAttribute in attributes) {\n\t\t\tlet subModelTypeAttribute = attributes[ type.prototype.subModelTypeAttribute ];\n\t\t\tlet subModelType = type._subModels[ subModelTypeAttribute ];\n\t\t\tif (subModelType) {\n\t\t\t\treturn subModelType;\n\t\t\t} else {\n\t\t\t\t// Recurse into subModelTypes to find a match\n\t\t\t\tfor (subModelTypeAttribute in type._subModels) {\n\t\t\t\t\tsubModelType = this._findSubModelType(type._subModels[ subModelTypeAttribute ], attributes);\n\t\t\t\t\tif (subModelType) {\n\t\t\t\t\t\treturn subModelType;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\tinitializeModelHierarchy() {\n\t\t// Inherit any relations that have been defined in the parent model.\n\t\tthis.inheritRelations();\n\n\t\t// If we came here through 'build' for a model that has 'subModelTypes' then try to initialize the ones that\n\t\t// haven't been resolved yet.\n\t\tif (this.prototype.subModelTypes) {\n\t\t\tlet resolvedSubModels = _.keys(this._subModels);\n\t\t\tlet unresolvedSubModels = _.omit(this.prototype.subModelTypes, resolvedSubModels);\n\t\t\t_.each(unresolvedSubModels, function(subModelTypeName) {\n\t\t\t\tlet subModelType = store.getObjectByName(subModelTypeName);\n\t\t\t\tsubModelType && subModelType.initializeModelHierarchy();\n\t\t\t});\n\t\t}\n\t},\n\n\tinheritRelations() {\n\t\t// Bail out if we've been here before.\n\t\tif (!_.isUndefined(this._superModel) && !_.isNull(this._superModel)) {\n\t\t\treturn;\n\t\t}\n\t\t// Try to initialize the _superModel.\n\t\tstore.setupSuperModel(this);\n\n\t\t// If a superModel has been found, copy relations from the _superModel if they haven't been inherited automatically\n\t\t// (due to a redefinition of 'relations').\n\t\tif (this._superModel) {\n\t\t// The _superModel needs a chance to initialize its own inherited relations before we attempt to inherit relations\n\t\t// from the _superModel. You don't want to call 'initializeModelHierarchy' because that could cause sub-models of\n\t\t// this class to inherit their relations before this class has had chance to inherit it's relations.\n\t\t\tthis._superModel.inheritRelations();\n\t\t\tif (this._superModel.prototype.relations) {\n\t\t\t// Find relations that exist on the '_superModel', but not yet on this model.\n\t\t\t\tlet inheritedRelations = _.filter(this._superModel.prototype.relations || [], function(superRel) {\n\t\t\t\t\treturn !_.any(this.prototype.relations || [], function(rel) {\n\t\t\t\t\t\treturn superRel.relatedModel === rel.relatedModel && superRel.key === rel.key;\n\t\t\t\t\t}, this);\n\t\t\t\t}, this);\n\n\t\t\t\tthis.prototype.relations = inheritedRelations.concat(this.prototype.relations);\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, make sure we don't get here again for this type by making '_superModel' false so we fail the\n\t\t\t// isUndefined/isNull check next time.\n\t\t\tthis._superModel = false;\n\t\t}\n\t},\n\n\t/**\n\t * Find an instance of `this` type in 'Backbone.store'.\n\t * A new model is created if no matching model is found, `attributes` is an object, and `options.create` is true.\n\t * - If `attributes` is a string or a number, `findOrCreate` will query the `store` and return a model if found.\n\t * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.\n\t * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.create=true]\n\t * @param {Boolean} [options.merge=true]\n\t * @param {Boolean} [options.parse=false]\n\t * @return {Backbone.Relational.Model}\n\t */\n\tfindOrCreate(attributes, options) {\n\t\toptions || (options = {});\n\t\tlet parsedAttributes = (_.isObject(attributes) && options.parse && this.prototype.parse) ?\n\t\tthis.prototype.parse(_.clone(attributes), options) : attributes;\n\n\t\t// If specified, use a custom `find` function to match up existing models to the given attributes.\n\t\t// Otherwise, try to find an instance of 'this' model type in the store\n\t\tlet model = this.findModel(parsedAttributes);\n\n\t\t// If we found an instance, update it with the data in 'item' (unless 'options.merge' is false).\n\t\t// If not, create an instance (unless 'options.create' is false).\n\t\tif (_.isObject(attributes)) {\n\t\t\tif (model && options.merge !== false) {\n\t\t\t// Make sure `options.collection` and `options.url` doesn't cascade to nested models\n\t\t\t\tdelete options.collection;\n\t\t\t\tdelete options.url;\n\n\t\t\t\tmodel.set(parsedAttributes, options);\n\t\t\t} else if (!model && options.create !== false) {\n\t\t\t\tmodel = this.build(parsedAttributes, _.defaults({ parse: false }, options));\n\t\t\t}\n\t\t}\n\n\t\treturn model;\n\t},\n\n\t/**\n\t * Find an instance of `this` type in 'Backbone.store'.\n\t * - If `attributes` is a string or a number, `find` will query the `store` and return a model if found.\n\t * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.\n\t * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.merge=true]\n\t * @param {Boolean} [options.parse=false]\n\t * @return {Backbone.Relational.Model}\n\t */\n\tfind(attributes, options) {\n\t\toptions || (options = {});\n\t\toptions.create = false;\n\t\treturn this.findOrCreate(attributes, options);\n\t},\n\n\t/**\n\t * A hook to override the matching when updating (or creating) a model.\n\t * The default implementation is to look up the model by id in the store.\n\t * @param {Object} attributes\n\t * @returns {Backbone.Relational.Model}\n\t */\n\tfindModel(attributes) {\n\t\treturn store.find(this, attributes);\n\t},\n\n\t// Override .extend() to automatically call .setup()\n\textend(protoProps, classProps) {\n\t\tlet child = BBModel.extend.call(this, protoProps, classProps);\n\t\tchild.setup(this);\n\t\treturn child;\n\t}\n});\n","import { Collection as BBCollection, Model as BBModel } from 'backbone';\nimport Model from './model';\nimport _ from 'underscore';\nimport eventQueue from './event-queue';\n\nexport default BBCollection.extend({\n\t/**\n\t * Override module.Collection._prepareModel, so objects will be built using the correct type\n\t * if the collection.model has subModels.\n\t * Attempts to find a model for `attrs` in Backbone.store through `findOrCreate`\n\t * (which sets the new properties on it if found), or instantiates a new model.\n\t */\n\t_prepareModel(attrs, options) {\n\t\tlet model;\n\n\t\tif (attrs instanceof BBModel) {\n\t\t\tif (!attrs.collection) {\n\t\t\t\tattrs.collection = this;\n\t\t\t}\n\t\t\tmodel = attrs;\n\t\t} else {\n\t\t\toptions = options ? _.clone(options) : {};\n\t\t\toptions.collection = this;\n\n\t\t\tif (typeof this.model.findOrCreate !== 'undefined') {\n\t\t\t\tmodel = this.model.findOrCreate(attrs, options);\n\t\t\t} else {\n\t\t\t\tconst TargetModel = this.model;\n\t\t\t\tmodel = new TargetModel(attrs, options);\n\t\t\t}\n\n\t\t\tif (model && model.validationError) {\n\t\t\t\tthis.trigger('invalid', this, attrs, options);\n\t\t\t\tmodel = false;\n\t\t\t}\n\t\t}\n\n\t\treturn model;\n\t},\n\t/**\n\t * Override module.Collection.set, so we'll create objects from attributes where required,\n\t * and update the existing models. Also, trigger 'relational:add'.\n\t */\n\tset(models, options) {\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\tif (!this.model.prototype instanceof Model) {\n\t\t\treturn BBCollection.prototype.set.call(this, models, options);\n\t\t}\n\n\t\tif (options && options.parse) {\n\t\t\tmodels = this.parse(models, options);\n\t\t}\n\n\t\tlet singular = !_.isArray(models);\n\t\tlet newModels = [];\n\t\tlet toAdd = [];\n\t\tlet model = null;\n\n\t\tmodels = singular ? (models ? [models] : []) : _.clone(models);\n\n\t\t//console.debug( 'calling add on coll=%o; model=%o, options=%o', this, models, options );\n\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\tmodel = models[i];\n\t\t\tif (!(model instanceof BBModel)) {\n\t\t\t\tmodel = this._prepareModel(model, options);\n\t\t\t}\n\n\t\t\tif (model) {\n\t\t\t\ttoAdd.push(model);\n\n\t\t\t\tif (!(this.get(model) || this.get(model.cid))) {\n\t\t\t\t\tnewModels.push(model);\n\t\t\t\t} else if (model.id != null) {\n\t\t\t\t\t// If we arrive in `add` while performing a `set` (after a create, so the model gains an `id`),\n\t\t\t\t\t// we may get here before `_onModelEvent` has had the chance to update `_byId`.\n\t\t\t\t\tthis._byId[ model.id ] = model;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add 'models' in a single batch, so the original add will only be called once (and thus 'sort', etc).\n\t\t// If `parse` was specified, the collection and contained models have been parsed now.\n\t\ttoAdd = singular ? (toAdd.length ? toAdd[ 0 ] : null) : toAdd;\n\t\tlet result = BBCollection.prototype.set.call(this, toAdd, _.defaults({ merge: false, parse: false }, options));\n\n\t\tfor (let i = 0; i < newModels.length; i++) {\n\t\t\tmodel = newModels[i];\n\t\t\t// Fire a `relational:add` event for any model in `newModels` that has actually been added to the collection.\n\t\t\tif (this.get(model) || this.get(model.cid)) {\n\t\t\t\tthis.trigger('relational:add', model, this, options);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'module.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations\n\t * are ready.\n\t * @param {String} [eventName] Name of of event\n\t */\n\ttrigger(eventName) {\n\t\tconst args = _.toArray(arguments);\n\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\tif (!(this.model.prototype instanceof Model)) {\n\t\t\treturn BBCollection.prototype.trigger.call(this, ...args);\n\t\t}\n\n\t\tif (eventName === 'add' || eventName === 'remove' || eventName === 'reset' || eventName === 'sort') {\n\t\t\tif (_.isObject(args[ 3 ])) {\n\t\t\t\t// the fourth argument is the option object.\n\t\t\t\t// we need to clone it, as it could be modified while we wait on the eventQueue to be unblocked\n\t\t\t\targs[ 3 ] = _.clone(args[ 3 ]);\n\t\t\t}\n\n\t\t\teventQueue.add(() => {\n\t\t\t\tBBCollection.prototype.trigger.call(this, ...args);\n\t\t\t});\n\t\t} else {\n\t\t\tBBCollection.prototype.trigger.call(this, ...args);\n\t\t}\n\n\t\treturn this;\n\t},\n\t/**\n\t * Override 'module.Collection.sort' to trigger 'relational:reset'.\n\t */\n\tsort(options) {\n\t\tlet result = BBCollection.prototype.sort.call(this, options);\n\n\t\tif (this.model.prototype instanceof Model) {\n\t\t\tthis.trigger('relational:reset', this, options);\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'module.Collection.reset' to trigger 'relational:reset'.\n\t */\n\treset(models, options) {\n\t\toptions = _.extend({ merge: true }, options);\n\t\tlet result = BBCollection.prototype.reset.call(this, models, options);\n\n\t\tif (this.model.prototype instanceof Model) {\n\t\t\tthis.trigger('relational:reset', this, options);\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * Override 'Backbone.Collection._removeModels' to trigger 'relational:remove'.\n\t */\n\t_removeModels(models, options) {\n\t\t// Short-circuit if this Collection doesn't hold RelationalModels\n\t\t// if ( !( this.model.prototype instanceof module.Model ) ) {\n\t\t// \treturn _removeModels.call( this, models, options );\n\t\t// }\n\n\t\tlet toRemove = [];\n\n\t\t//console.debug('calling remove on coll=%o; models=%o, options=%o', this, models, options );\n\t\t_.each(models, (model) => {\n\t\t\tmodel = this.get(model) || (model && this.get(model.cid));\n\t\t\tmodel && toRemove.push(model);\n\t\t});\n\n\t\tlet result = BBCollection.prototype._removeModels.call(this, toRemove, options);\n\n\t\t_.each(toRemove, (model) => {\n\t\t\tthis.trigger('relational:remove', model, this, options);\n\t\t});\n\n\t\treturn result;\n\t}\n});\n","import _ from 'underscore';\nimport Relation from './relation';\nimport store from './store';\nimport eventQueue from './event-queue';\n\nexport default Relation.extend({\n\toptions: {\n\t\treverseRelation: { type: 'HasMany' }\n\t},\n\n\tinitialize(opts) {\n\t\tthis.listenTo(this.instance, 'relational:change:' + this.key, this.onChange);\n\n\t\tlet related = this.findRelated(opts);\n\t\tthis.setRelated(related);\n\n\t\t// Notify new 'related' object of the new relation.\n\t\t_.each(this.getReverseRelations(), (relation) => {\n\t\t\trelation.addRelated(this.instance, opts);\n\t\t});\n\t},\n\n\t/**\n\t * Find related Models.\n\t * @param {Object} [options]\n\t * @return {Backbone.Model}\n\t */\n\tfindRelated(options) {\n\t\tlet related = null;\n\n\t\toptions = _.defaults({ parse: this.options.parse }, options);\n\n\t\tif (this.keyContents instanceof this.relatedModel) {\n\t\t\trelated = this.keyContents;\n\t\t} else if (this.keyContents || this.keyContents === 0) { // since 0 can be a valid `id` as well\n\t\t\tlet opts = _.defaults({ create: this.options.createModels }, options);\n\t\t\trelated = this.relatedModel.findOrCreate(this.keyContents, opts);\n\t\t}\n\n\t\t// Nullify `keyId` if we have a related model; in case it was already part of the relation\n\t\tif (related) {\n\t\t\tthis.keyId = null;\n\t\t}\n\n\t\treturn related;\n\t},\n\n\t/**\n\t * Normalize and reduce `keyContents` to an `id`, for easier comparison\n\t * @param {String|Number|Backbone.Model} keyContents\n\t */\n\tsetKeyContents(keyContents) {\n\t\tthis.keyContents = keyContents;\n\t\tthis.keyId = store.resolveIdForItem(this.relatedModel, this.keyContents);\n\t},\n\n\t/**\n\t * Event handler for `change:<key>`.\n\t * If the key is changed, notify old & new reverse relations and initialize the new relation.\n\t */\n\tonChange(model, attr, options) {\n\t\t// Don't accept recursive calls to onChange (like onChange->findRelated->findOrCreate->initializeRelations->addRelated->onChange)\n\t\tif (this.isLocked()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.acquire();\n\t\toptions = options ? _.clone(options) : {};\n\n\t\t// 'options.__related' is set by 'addRelated'/'removeRelated'. If it is set, the change\n\t\t// is the result of a call from a relation. If it's not, the change is the result of\n\t\t// a 'set' call on this.instance.\n\t\tlet changed = _.isUndefined(options.__related);\n\t\tlet oldRelated = changed ? this.related : options.__related;\n\n\t\tif (changed) {\n\t\t\tthis.setKeyContents(attr);\n\t\t\tlet related = this.findRelated(options);\n\t\t\tthis.setRelated(related);\n\t\t}\n\n\t\t// Notify old 'related' object of the terminated relation\n\t\tif (oldRelated && this.related !== oldRelated) {\n\t\t\t_.each(this.getReverseRelations(oldRelated), (relation) => {\n\t\t\t\trelation.removeRelated(this.instance, null, options);\n\t\t\t});\n\t\t}\n\n\t\t// Notify new 'related' object of the new relation. Note we do re-apply even if this.related is oldRelated;\n\t\t// that can be necessary for bi-directional relations if 'this.instance' was created after 'this.related'.\n\t\t// In that case, 'this.instance' will already know 'this.related', but the reverse might not exist yet.\n\t\t_.each(this.getReverseRelations(), (relation) => {\n\t\t\trelation.addRelated(this.instance, options);\n\t\t});\n\n\t\t// Fire the 'change:<key>' event if 'related' was updated\n\t\tif (!options.silent && this.related !== oldRelated) {\n\t\t\tthis.changed = true;\n\t\t\teventQueue.add(() => {\n\t\t\t\tthis.instance.trigger('change:' + this.key, this.instance, this.related, options, true);\n\t\t\t\tthis.changed = false;\n\t\t\t});\n\t\t}\n\t\tthis.release();\n\t},\n\n\t/**\n\t * If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'\n\t */\n\ttryAddRelated(model, coll, options) {\n\t\tif ((this.keyId || this.keyId === 0) && model.id === this.keyId) { // since 0 can be a valid `id` as well\n\t\t\tthis.addRelated(model, options);\n\t\t\tthis.keyId = null;\n\t\t}\n\t},\n\n\taddRelated(model, options) {\n\t\t// Allow 'model' to set up its relations before proceeding.\n\t\t// (which can result in a call to 'addRelated' from a relation of 'model')\n\t\tmodel.queue(() => {\n\t\t\tif (model !== this.related) {\n\t\t\t\tlet oldRelated = this.related || null;\n\t\t\t\tthis.setRelated(model);\n\t\t\t\tthis.onChange(this.instance, model, _.defaults({ __related: oldRelated }, options));\n\t\t\t}\n\t\t});\n\t},\n\n\tremoveRelated(model, coll, options) {\n\t\tif (!this.related) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (model === this.related) {\n\t\t\tlet oldRelated = this.related || null;\n\t\t\tthis.setRelated(null);\n\t\t\tthis.onChange(this.instance, model, _.defaults({ __related: oldRelated }, options));\n\t\t}\n\t}\n});\n","import _ from 'underscore';\nimport Relation from './relation';\nimport store from './store';\nimport eventQueue from './event-queue';\nimport Collection from './collection';\nimport config from './config';\n\nexport default Relation.extend({\n\tcollectionType: null,\n\n\toptions: {\n\t\treverseRelation: { type: 'HasOne' },\n\t\tcollectionType: Collection,\n\t\tcollectionKey: true,\n\t\tcollectionOptions: {}\n\t},\n\n\tinitialize(opts) {\n\t\tthis.listenTo(this.instance, 'relational:change:' + this.key, this.onChange);\n\n\t\t// Handle a custom 'collectionType'\n\t\tthis.collectionType = this.options.collectionType;\n\t\tif (_.isFunction(this.collectionType) && this.collectionType !== Collection && !(this.collectionType.prototype instanceof Collection)) {\n\t\t\tthis.collectionType = _.result(this, 'collectionType');\n\t\t}\n\t\tif (_.isString(this.collectionType)) {\n\t\t\tthis.collectionType = store.getObjectByName(this.collectionType);\n\t\t}\n\t\tif (this.collectionType !== Collection && !(this.collectionType.prototype instanceof Collection)) {\n\t\t\tthrow new Error('`collectionType` must inherit from Collection');\n\t\t}\n\n\t\tlet related = this.findRelated(opts);\n\t\tthis.setRelated(related);\n\t},\n\n\t/**\n\t * Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\n\t * If no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.\n\t * @param {Collection} [collection]\n\t * @return {Collection}\n\t */\n\t_prepareCollection(collection) {\n\t\tif (this.related) {\n\t\t\tthis.stopListening(this.related);\n\t\t}\n\n\t\tif (!collection || !(collection instanceof Collection)) {\n\t\t\tlet options = _.isFunction(this.options.collectionOptions) ?\n\t\t\t\tthis.options.collectionOptions(this.instance) : this.options.collectionOptions;\n\n\t\t\tcollection = new this.collectionType(null, options);\n\t\t}\n\n\t\tcollection.model = this.relatedModel;\n\n\t\tif (this.options.collectionKey) {\n\t\t\tlet key = this.options.collectionKey === true ? this.options.reverseRelation.key : this.options.collectionKey;\n\n\t\t\tif (collection[ key ] && collection[ key ] !== this.instance) {\n\t\t\t\tif (config.showWarnings && typeof console !== 'undefined') {\n\t\t\t\t\tconsole.warn('Relation=%o; collectionKey=%s already exists on collection=%o', this, key, this.options.collectionKey);\n\t\t\t\t}\n\t\t\t} else if (key) {\n\t\t\t\tcollection[ key ] = this.instance;\n\t\t\t}\n\t\t}\n\n\t\tthis.listenTo(collection, 'relational:add', this.handleAddition)\n\t\t\t.listenTo(collection, 'relational:remove', this.handleRemoval)\n\t\t\t.listenTo(collection, 'relational:reset', this.handleReset);\n\n\t\treturn collection;\n\t},\n\n\t/**\n\t * Find related Models.\n\t * @param {Object} [options]\n\t * @return {Collection}\n\t */\n\tfindRelated(options) {\n\t\tlet related = null;\n\n\t\toptions = _.defaults({ parse: this.options.parse }, options);\n\n\t\t// Replace 'this.related' by 'this.keyContents' if it is a Collection\n\t\t// Otherwise, 'this.keyContents' should be an array of related object ids.\n\t\t// Re-use the current 'this.related' if it is a Collection; otherwise, create a new collection.\n\t\tif (this.keyContents instanceof Collection) {\n\t\t\tthis._prepareCollection(this.keyContents);\n\t\t\trelated = this.keyContents;\n\t\t} else {\n\t\t\tlet toAdd = [];\n\n\t\t\t_.each(this.keyContents, (attributes) => {\n\t\t\t\tlet model = null;\n\n\t\t\t\tif (attributes instanceof this.relatedModel) {\n\t\t\t\t\tmodel = attributes;\n\t\t\t\t} else {\n\t\t\t\t\t// If `merge` is true, update models here, instead of during update.\n\t\t\t\t\tmodel = (_.isObject(attributes) && options.parse && this.relatedModel.prototype.parse) ?\n\t\t\t\t\t\tthis.relatedModel.prototype.parse(_.clone(attributes), options) : attributes;\n\t\t\t\t}\n\n\t\t\t\tmodel && toAdd.push(model);\n\t\t\t});\n\n\t\t\tif (this.related instanceof Collection) {\n\t\t\t\trelated = this.related;\n\t\t\t} else {\n\t\t\t\trelated = this._prepareCollection();\n\t\t\t}\n\n\t\t\t// By now, `parse` will already have been executed just above for models if specified.\n\t\t\t// Disable to prevent additional calls.\n\t\t\trelated.set(toAdd, _.defaults({ parse: false }, options));\n\t\t}\n\n\t\t// Remove entries from `keyIds` that were already part of the relation (and are thus 'unchanged')\n\t\tthis.keyIds = _.difference(this.keyIds, _.pluck(related.models, 'id'));\n\n\t\treturn related;\n\t},\n\n\t/**\n\t * Normalize and reduce `keyContents` to a list of `ids`, for easier comparison\n\t * @param {String|Number|String[]|Number[]|Collection} keyContents\n\t */\n\tsetKeyContents(keyContents) {\n\t\tthis.keyContents = keyContents instanceof Collection ? keyContents : null;\n\t\tthis.keyIds = [];\n\n\t\tif (!this.keyContents && (keyContents || keyContents === 0)) { // since 0 can be a valid `id` as well\n\t\t\t// Handle cases the an API/user supplies just an Object/id instead of an Array\n\t\t\tthis.keyContents = _.isArray(keyContents) ? keyContents : [keyContents];\n\n\t\t\t_.each(this.keyContents, (item) => {\n\t\t\t\tlet itemId = store.resolveIdForItem(this.relatedModel, item);\n\t\t\t\tif (itemId || itemId === 0) {\n\t\t\t\t\tthis.keyIds.push(itemId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Event handler for `change:<key>`.\n\t * If the contents of the key are changed, notify old & new reverse relations and initialize the new relation.\n\t */\n\tonChange(model, attr, options) {\n\t\toptions = options ? _.clone(options) : {};\n\t\tthis.setKeyContents(attr);\n\t\tthis.changed = false;\n\n\t\tlet related = this.findRelated(options);\n\t\tthis.setRelated(related);\n\n\t\tif (!options.silent) {\n\t\t\teventQueue.add(() => {\n\t\t\t\t// The `changed` flag can be set in `handleAddition` or `handleRemoval`\n\t\t\t\tif (this.changed) {\n\t\t\t\t\tthis.instance.trigger('change:' + this.key, this.instance, this.related, options, true);\n\t\t\t\t\tthis.changed = false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * When a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.\n\t * (should be 'HasOne', must set 'this.instance' as their related).\n\t */\n\thandleAddition(model, coll, options) {\n\t\t//console.debug('handleAddition called; args=%o', arguments);\n\t\toptions = options ? _.clone(options) : {};\n\t\tthis.changed = true;\n\n\t\t_.each(this.getReverseRelations(model), (relation) => {\n\t\t\trelation.addRelated(this.instance, options);\n\t\t});\n\n\t\t// Only trigger 'add' once the newly added model is initialized (so, has its relations set up)\n\t\t!options.silent && eventQueue.add(() => {\n\t\t\tthis.instance.trigger('add:' + this.key, model, this.related, options);\n\t\t});\n\t},\n\n\t/**\n\t * When a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.\n\t * (should be 'HasOne', which should be nullified)\n\t */\n\thandleRemoval(model, coll, options) {\n\t\t//console.debug('handleRemoval called; args=%o', arguments);\n\t\toptions = options ? _.clone(options) : {};\n\t\tthis.changed = true;\n\n\t\t_.each(this.getReverseRelations(model), function(relation) {\n\t\t\trelation.removeRelated(this.instance, null, options);\n\t\t}, this);\n\n\t\t!options.silent && eventQueue.add(() => {\n\t\t\tthis.instance.trigger('remove:' + this.key, model, this.related, options);\n\t\t});\n\t},\n\n\thandleReset(coll, options) {\n\t\toptions = options ? _.clone(options) : {};\n\t\t!options.silent && eventQueue.add(() => {\n\t\t\tthis.instance.trigger('reset:' + this.key, this.related, options);\n\t\t});\n\t},\n\n\ttryAddRelated(model, coll, options) {\n\t\tlet item = _.contains(this.keyIds, model.id);\n\n\t\tif (item) {\n\t\t\tthis.addRelated(model, options);\n\t\t\tthis.keyIds = _.without(this.keyIds, model.id);\n\t\t}\n\t},\n\n\taddRelated(model, options) {\n\t\t// Allow 'model' to set up its relations before proceeding.\n\t\t// (which can result in a call to 'addRelated' from a relation of 'model')\n\t\tmodel.queue(() => {\n\t\t\tif (this.related && !this.related.get(model)) {\n\t\t\t\tthis.related.add(model, _.defaults({ parse: false }, options));\n\t\t\t}\n\t\t});\n\t},\n\n\tremoveRelated(model, coll, options) {\n\t\tif (this.related.get(model)) {\n\t\t\tthis.related.remove(model, options);\n\t\t}\n\t}\n});\n","import Semaphore from './utils/semaphore';\nimport BlockingQueue from './utils/blocking-queue';\nimport eventQueue from './event-queue';\nimport config from './config';\nimport Collection from './collection';\nimport relationTypeStore from './relation-type-store';\nimport Relation from './relation';\nimport HasOne from './relation.has-one';\nimport HasMany from './relation.has-many';\nimport Store from './utils/store';\nimport store from './store';\nimport Model from './model';\n\nexport { Collection };\nexport { Model };\n\nexport { Semaphore };\nexport { BlockingQueue };\nexport { eventQueue };\n\nexport { Store };\nexport { store };\n\nexport { relationTypeStore };\nexport { Relation };\nexport { HasOne };\nexport { HasMany };\n\nrelationTypeStore.registerType('HasOne', HasOne);\nrelationTypeStore.registerType('HasMany', HasMany);\n\nexport { config };\n"],"names":["_permitsAvailable","_permitsUsed","Error","amount","BlockingQueue","_queue","_","extend","prototype","Semaphore","func","isBlocked","push","queue","length","shift","acquire","release","process","isLocked","Model","ExtendableObject","args","initialize","call","Events","BObject","types","name","Type","RelationTypeStore","_collections","_reverseRelations","_orphanRelations","_subModels","_modelScopes","window","model","relation","options","type","isString","relationTypeStore","find","getObjectByName","isObject","relationType","config","showWarnings","console","warn","scope","without","subModelTypes","superModelType","modelType","subModelDef","filter","subModels","subModelTypeName","typeValue","subModelType","_superModel","_subModelTypeValue","_subModelTypeAttribute","subModelTypeAttribute","exists","any","rel","all","val","key","_addRelation","retroFitRelation","each","slice","relatedModel","initializeRelation","relations","subModel","RelationType","coll","getCollection","create","BBModel","constructor","rootModel","item","_createCollection","parts","split","reduce","memo","undefined","Collection","isNumber","id","idAttribute","resolveIdForItem","obj","get","modelColl","collection","add","duplicate","contains","register","_onModelEvent","trigger","models","clone","stopListening","invoke","getRelations","reset","remove","unregister","Store","instance","opts","reverseRelation","defaults","store","keySource","keyDestination","isUndefined","isFunction","result","checkPreconditions","isAutoRelation","addReverseRelation","contentKey","setKeyContents","relatedCollection","attributes","_relations","autoFetch","getAsync","listenTo","destroy","tryAddRelated","removeRelated","i","k","m","rm","keys","existing","related","reverseRelations","j","_isReverseRelation","setRelated","_prepareCollection","getReverseRelations","_deferProcessing","processQueue","off","defer","processOrphanRelations","block","unblock","eventName","toArray","arguments","indexOf","eventQueue","changed","hasChanged","_attributeChangeFired","attr","getRelation","_isInitialized","changedAttrs","value","values","refresh","Relation","ids","keyIds","keyId","requests","idsToFetch","getIdsToFetch","createModels","map","findModel","attrs","findOrCreate","createdModels","setUrl","url","defaultUrl","error","fetch","deferArray","then","$","when","newId","checkId","set","initializeModelHierarchy","initializeRelations","update","updateRelations","json","toJSON","includeInJSON","pluck","concat","keyContents","isArray","curJson","wait","superModel","hasOwnProperty","addSubModels","preInitialize","addOrphanRelation","_findSubModelType","inheritRelations","resolvedSubModels","unresolvedSubModels","omit","isNull","setupSuperModel","inheritedRelations","superRel","parsedAttributes","parse","merge","build","protoProps","classProps","child","setup","BBCollection","TargetModel","validationError","singular","newModels","toAdd","_prepareModel","cid","_byId","sort","toRemove","_removeModels","onChange","findRelated","addRelated","__related","oldRelated","silent","collectionType","collectionOptions","collectionKey","handleAddition","handleRemoval","handleReset","difference","itemId","registerType","HasOne","HasMany"],"mappings":"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"}